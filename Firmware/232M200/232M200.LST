MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00001 ;----------------------------------------------------------------------------
                    00002 ;
                    00003 ; Integrity Instruments
                    00004 ; ---------------------
                    00005 ; PO Box 451   2642 20th Ave SW
                    00006 ; Pine River, MN 56474
                    00007 ; Tel: 800-450-2001
                    00008 ; Web: www.rs-485.com
                    00009 ;
                    00010 ; Description
                    00011 ; -----------
                    00012 ; Integrity Instruments 232M200 Module Firmware
                    00013 ;
                    00014 ; Version:  3.2
                    00015 ;
                    00016 ; Note: Based on ADC-DIG v2.3 code (ala Tony, not Tim's)
                    00017 ;
                    00018 ; ------------
                    00019 ;
                    00020 ; Revision History
                    00021 ; -------------------------------------------------------
                    00022 ;   A. Kempka   Original    11/18/98    v2.0
                    00023 ;   A. Kempka   v2.3        11/1/99     Added delta Digital and Delta counter
                    00024 ;                                       to the Async changed update.
                    00025 ;   A. Kempka   v3.0        2/25/2002   Converted to 232M300 module
                    00026 ;   A. Kempka   v3.0        10/3/2002   Converted from 232M300 module source code
                    00027 ;   A. Kempka   RTM         12/16/2002
                    00028 ;   A. Kempka   v3.1        2/18/2003   Fixed problem where the stream flags for
                    00029 ;                                       Digital, Analog, and Counter were not read
                    00030 ;                                       during reboot
                    00031 ;   A. Kempka   v3.2        3/23/2003   Fixed PORT2 (PORTB) power up default and TRIS
                    00032 ;                                       data direction
                    00033 ;
                    00034 
                    00035 
                    00036 ;
                    00037 ;----------------------------------------------------------------------------
                    00038 ; Specify processor type and output format.
                    00039 ; BUGBUG: Use 16C63A in the final release
                    00040 ;
Warning[217]: Hex file format specified on command line.
                    00041         list p=16c63A, f=inhx8m
                    00042 
                    00043 ;----------------------------------------------------------------------------
                    00044 ; Include the Processor specific defines.
                    00045 ;
                    00046 #INCLUDE "P16C63A.INC"
                    00001         LIST
                    00002 ; P16C63A.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                    00286         LIST
                    00047 
                    00048 ;
                    00049 ; MPU configuration options
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00050 ;
2007 00C6           00051   __CONFIG   _CP_ALL & _WDT_ON & _HS_OSC & _PWRTE_ON & _BODEN_ON
                    00052 
                    00053 ;----------------------------------------------------------------------------
                    00054 ; General equates.
                    00055 ;----------------------------------------------------------------------------
                    00056 
  00000033          00057 VERSION_MAJOR       EQU     '3'
  00000032          00058 VERSION_MINOR       EQU     '2'
                    00059 
  00000001          00060 TRUE                EQU     1
  00000000          00061 FALSE               EQU     0
                    00062 
                    00063 ;----------------------------------------------------------------------------
                    00064 ; EEPROM addresses
                    00065 ;----------------------------------------------------------------------------
  00000000          00066 EE_MOD_ADDR         EQU     0x00    ; Module address
  00000001          00067 EE_DEST_ADDR        EQU     0x01    ; Async destination address
  00000002          00068 EE_PORT1_DIR        EQU     0x02    ; Port 1 data direction (PORTB)
  00000003          00069 EE_PORT2_DIR        EQU     0x03    ; Port 2 data direction (PORTD)
  00000004          00070 EE_ASYNC_CONFIG_MSB EQU     0x04    ; Async configuration MSB
  00000005          00071 EE_ASYNC_CONFIG_LSB EQU     0x05    ; Async configuration LSB
  00000006          00072 EE_PORT1_DEF        EQU     0x06    ; Port 1 default power up setting (PORTB)
  00000007          00073 EE_PORT2_DEF        EQU     0x07    ; Port 2 default power up setting (PORTD)
  00000008          00074 EE_EXPANDER         EQU     0x08    ; 0xFF if expander Opto-22 modules in use
  00000009          00075 EE_DAC0_MSB         EQU     0x09    ; DAC Channel 0 power up setting
  0000000A          00076 EE_DAC0_LSB         EQU     0x0A    ; DAC Channel 0 power up setting
  0000000B          00077 EE_DAC1_MSB         EQU     0x0B    ; DAC Channel 1 power up setting
  0000000C          00078 EE_DAC1_LSB         EQU     0x0C    ; DAC Channel 1 power up setting
  0000000D          00079 EE_SLOW_ADC         EQU     0x0D    ; 0xFF slows A/D clock for high impedance inputs
  0000000F          00080 EE_OFFSET_CALIB     EQU     0x0F    ; A/D Offset calibration (2's compliment)
  00000010          00081 EE_STREAM_ANALOG    EQU     0x10    ;
  00000011          00082 EE_ANALOG_CFG_BASE  EQU     0x11
  00000019          00083 EE_STREAM_DIG       EQU     0x19    ;
  0000001A          00084 EE_STREAM_COUNT     EQU     0x1A    ;
                    00085 
                    00086 ;----------------------------------------------------------------------------
                    00087 ;
                    00088 ; Baud Rate divisors
                    00089 ; Clock = 7.3728 Mhz with prescale of 64
                    00090 ;
                    00091 ;SPBRG_600           EQU     0xBF
                    00092 ;SPBRG_1200          EQU     0x5F
                    00093 ;SPBRG_2400          EQU     0x2F
                    00094 ;SPBRG_4800          EQU     0x17
                    00095 ;SPBRG_9600          EQU     0x0B
                    00096 ;SPBRG_19200         EQU     0x05
                    00097 ;SPBRG_38400         EQU     0x02
                    00098 ;SPBRG_57600         EQU     0x01
                    00099 ;SPBRG_115200        EQU     0x00
                    00100 ;
                    00101 ; Clock = 14.7456 Mhz with prescale of 64
                    00102 ;
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000BF          00103 SPBRG_1200          EQU     0xBF
  0000005F          00104 SPBRG_2400          EQU     0x5F
  0000002F          00105 SPBRG_4800          EQU     0x2F
  00000017          00106 SPBRG_9600          EQU     0x17
  0000000B          00107 SPBRG_19200         EQU     0x0B
  00000005          00108 SPBRG_38400         EQU     0x05
  00000003          00109 SPBRG_57600         EQU     0x03
  00000001          00110 SPBRG_115200        EQU     0x01
  00000000          00111 SPBRG_230400        EQU     0x00
                    00112 
                    00113 ;----------------------------------------------------------------------------
                    00114 ;
                    00115 ; Timer 1 reload values
                    00116 ;
                    00117 ; Clock = 7.3728 Mhz with prescale of 1
                    00118 ; 0xF8CC - instruction count for ISR (0x10) = 0xF8BC
                    00119 ;TMR1_RELOAD_H       EQU     0xF8
                    00120 ;TMR1_RELOAD_L       EQU     0xBC
                    00121 ; Clock = 14.7456 Mhz with prescale of 1
                    00122 ; 0xF199 - instruction count for ISR (0x10) = 0xF189
  000000F1          00123 TMR1_RELOAD_H       EQU     0xF1
  00000089          00124 TMR1_RELOAD_L       EQU     0x89
                    00125 
                    00126 
                    00127 ;----------------------------------------------------------------------------
                    00128 ; Port bit defines
                    00129 ;----------------------------------------------------------------------------
                    00130 
                    00131 ; PORT A bits
  00000000          00132 EEPROM_CS       EQU     0x00
  00000001          00133 RTC_CS          EQU     0x01
  00000002          00134 ADC_CS          EQU     0x02
  00000003          00135 DAC_CS          EQU     0x03
  00000005          00136 LED_BIT         EQU     0x05
                    00137 
                    00138 
                    00139 ;--------------------------------------------------------------------------
                    00140 ; Variables
                    00141 ; Ram BANK 0
                    00142 ;--------------------------------------------------------------------------
  00000020          00143 RamBank0        EQU     0x20
  00000020          00144 W_TEMP          EQU     RamBank0+0x00
  00000021          00145 STATUS_TEMP     EQU     RamBank0+0x01
  00000022          00146 STRING_INDEX    EQU     RamBank0+0x02
  00000023          00147 RUNNING_CNT_H   EQU     RamBank0+0x03
  00000024          00148 RUNNING_CNT_L   EQU     RamBank0+0x04
  00000025          00149 LED_CNT_L       EQU     RamBank0+0x05
  00000026          00150 BI_UNI_POLAR    EQU     RamBank0+0x06
  00000027          00151 LED_ON_FLAG     EQU     RamBank0+0x07
  00000028          00152 EEPROM_ADDRESS  EQU     RamBank0+0x08
  00000029          00153 DIP_SWITCH      EQU     RamBank0+0x09
  0000002A          00154 OUR_SPBRG       EQU     RamBank0+0x0A
  0000002B          00155 ADC_CLOCK       EQU     RamBank0+0x0B
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002C          00156 HEX_TEMP        EQU     RamBank0+0x0C
                    00157 
  00000030          00158 INPUT_REGISTER  EQU     RamBank0+0x10
  00000031          00159 SCRATCH         EQU     RamBank0+0x11
  00000032          00160 CONTROL_ANALOG  EQU     RamBank0+0x12
  00000033          00161 RCV_ERROR_CNT   EQU     RamBank0+0x13
                    00162 
  00000036          00163 OUR_TRISB       EQU     RamBank0+0x16
  00000037          00164 OUR_TRISD       EQU     RamBank0+0x17
  00000038          00165 OUR_PORTB       EQU     RamBank0+0x18
  00000039          00166 OUR_PORTD       EQU     RamBank0+0x19
                    00167 
  0000003A          00168 ADC_NIBBLE1     EQU    RamBank0+0x1A
  0000003B          00169 ADC_NIBBLE2     EQU    RamBank0+0x1B
  0000003C          00170 ADC_NIBBLE3     EQU    RamBank0+0x1C
                    00171 
  0000003F          00172 RCV_BUFFER_PTR  EQU     RamBank0+0x1F
  00000040          00173 RCV_BUFFER      EQU     RamBank0+0x20
  00000050          00174 RCV_BUFFER_ST   EQU     RamBank0+0x30
  00000051          00175 RCV_LAST_CHAR   EQU     RamBank0+0x31
                    00176 
  00000052          00177 STREAM          EQU     RamBank0+0x32
  00000053          00178 ASYNC_CONFIG    EQU     RamBank0+0x33
  00000054          00179 ASYNC_TIME_H    EQU     RamBank0+0x34
  00000055          00180 ASYNC_TIME_L    EQU     RamBank0+0x35
                    00181 
  00000059          00182 STREAM_ANALOG_CNT EQU     RamBank0+0x39
  0000005A          00183 STREAM_CH       EQU     RamBank0+0x3A
                    00184 
  0000005B          00185 STREAM_ANALOG   EQU     RamBank0+0x3B
  0000005C          00186 STREAM_DIG      EQU     RamBank0+0x3C
  0000005D          00187 STREAM_COUNT    EQU     RamBank0+0x3D
  0000005E          00188 EXPANDER        EQU     RamBank0+0x3E
                    00189 
  00000060          00190 PREV_PORTB      EQU     RamBank0+0x40
  00000061          00191 PREV_PORTD      EQU     RamBank0+0x41
  00000062          00192 PREV_TMR0       EQU     RamBank0+0x42
  00000063          00193 PREV_TMR0H      EQU     RamBank0+0x43
                    00194 
  00000064          00195 CURRENT_PTR     EQU     RamBank0+0x44
                    00196 
  00000065          00197 PWM_LSB         EQU     RamBank0+0x45
  00000066          00198 PWM_MSB         EQU     RamBank0+0x46
  00000067          00199 PWM_DIVISOR     EQU     RamBank0+0x47
                    00200 
  00000070          00201 DAC0_MSB        EQU     RamBank0+0x50
  00000071          00202 DAC0_LSB        EQU     RamBank0+0x51
  00000072          00203 DAC1_MSB        EQU     RamBank0+0x52
  00000073          00204 DAC1_LSB        EQU     RamBank0+0x53
                    00205 
  00000074          00206 OUR_TMR0H_MSB   EQU     RamBank0+0x54
  00000075          00207 OUR_TMR0L_MSB   EQU     RamBank0+0x55
  00000076          00208 OUR_TMR0H       EQU     RamBank0+0x56
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000077          00209 OUR_TMR0L       EQU     RamBank0+0x57
  00000078          00210 TMR0H_MSB       EQU     RamBank0+0x58
  00000079          00211 TMR0L_MSB       EQU     RamBank0+0x59
  0000007A          00212 TMR0H           EQU     RamBank0+0x5A
                    00213 
                    00214 ;--------------------------------------------------------------------------
                    00215 ; Program Code
                    00216 ;--------------------------------------------------------------------------
                    00217 
                    00218 
                    00219 
                    00220 ;----------------------------------------------------------------------------
                    00221 ; Setup RESET and interrupt vectors.
                    00222 ;----------------------------------------------------------------------------
0000                00223         org     0               ; Code start address = 0
0000 018A           00224         clrf    PCLATH
0001 2820           00225         goto    Start
                    00226 
0004                00227         org     4               ; Irq address = 4
0004 2C72           00228         goto    Main_Isr
                    00229 
                    00230 ;----------------------------------------------------------------------------
                    00231 
                    00232 
                    00233 
                    00234 ;----------------------------------------------------------------------------
                    00235 ; Begin code.
                    00236 ;----------------------------------------------------------------------------
                    00237 ;
0020                00238         org     0x20
                    00239 
                    00240 ;----------------------------------------------------------------------------
                    00241 ; Initialization and Start-Up code.
                    00242 ;----------------------------------------------------------------------------
0020                00243 Start
                    00244 ; ------------- BANK 0 ------------------------------------------------------
0020 1283           00245         bcf     STATUS, RP0     ; select BANK 0
0021 0185           00246         clrf    PORTA           ; clear PORT A
0022 0186           00247         clrf    PORTB           ; clear PORT B
0023 0187           00248         clrf    PORTC           ; clear PORT C
                    00249 
                    00250 ; ------------- BANK 1 ------------------------------------------------------
0024 1683           00251         bsf     STATUS, RP0     ; select BANK 1
0025 3010           00252         movlw   0x10
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0026 0085           00253         movwf   TRISA           ; set direction PORT A (0,1,2,3,5 OUT: 4 IN)
0027 30FF           00254         movlw   0xFF
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0028 0086           00255         movwf   TRISB           ; set direction PORT B (0..7 IN)
0029 30D3           00256         movlw   0xD3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002A 0087           00257         movwf   TRISC           ; set direction PORT C (0,1 IN: 2,3,5 OUT: 4,6,7 IN)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002B 0192           00258         clrf    PR2             ; PWM period = 0
                    00259 
                    00260 ; ------------- BANK 0 ------------------------------------------------------
002C 1283           00261         bcf     STATUS, RP0     ; select BANK 0
002D 0185           00262         clrf    PORTA           ; clear PORT A
002E 0186           00263         clrf    PORTB           ; clear PORT B
002F 0187           00264         clrf    PORTC           ; clear PORT C
0030 01AA           00265         clrf    OUR_SPBRG
0031 01A7           00266         clrf    LED_ON_FLAG
0032 01A5           00267         clrf    LED_CNT_L
0033 01A4           00268         clrf    RUNNING_CNT_L
0034 01A3           00269         clrf    RUNNING_CNT_H
0035 01D5           00270         clrf    ASYNC_TIME_L
0036 01D4           00271         clrf    ASYNC_TIME_H
0037 01B3           00272         clrf    RCV_ERROR_CNT
0038 01D1           00273         clrf    RCV_LAST_CHAR
0039 01D2           00274         clrf    STREAM
003A 01D3           00275         clrf    ASYNC_CONFIG
003B 01FA           00276         clrf    TMR0H
003C 01E5           00277         clrf    PWM_LSB
003D 01E6           00278         clrf    PWM_MSB
003E 01E7           00279         clrf    PWM_DIVISOR
003F 01A9           00280         clrf    DIP_SWITCH
0040 01AB           00281         clrf    ADC_CLOCK
                    00282 
0041 01F0           00283         clrf    DAC0_MSB
0042 01F1           00284         clrf    DAC0_LSB
0043 01F2           00285         clrf    DAC1_MSB
0044 01F3           00286         clrf    DAC1_LSB
                    00287 
0045 01DC           00288         clrf    STREAM_DIG
0046 01DD           00289         clrf    STREAM_COUNT
0047 01DB           00290         clrf    STREAM_ANALOG
                    00291 
0048 01F4           00292         clrf    OUR_TMR0H_MSB
0049 01F5           00293         clrf    OUR_TMR0L_MSB
004A 01F6           00294         clrf    OUR_TMR0H
004B 01F7           00295         clrf    OUR_TMR0L
004C 01F8           00296         clrf    TMR0H_MSB
004D 01F9           00297         clrf    TMR0L_MSB
004E 01FA           00298         clrf    TMR0H
                    00299 
004F 1505           00300         bsf     PORTA, ADC_CS       ; ADC not selected
0050 1405           00301         bsf     PORTA, EEPROM_CS    ; EEPROM not selected
0051 1585           00302         bsf     PORTA, DAC_CS       ; DAC not selected
0052 1485           00303         bsf     PORTA, RTC_CS       ; RTC not selected
                    00304 
0053                00305 Start4
0053 3031           00306         movlw   0x31            ; SPI Master mode, CKP=1, Fosc/16
0054 0094           00307         movwf   SSPCON
0055 30F8           00308         movlw   0xF8            ; Load Timer1 counters
0056 008F           00309         movwf   TMR1H
0057 30CC           00310         movlw   0xCC            ; 0xF8CC == 1 ms. interrupt
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0058 008E           00311         movwf   TMR1L
0059 3001           00312         movlw   0x01            ; Timer1 prescale 1:1, enable Timer1
005A 0090           00313         movwf   T1CON
                    00314 
005B 0195           00315         clrf    CCPR1L          ; PWM LSB = 0
005C 300C           00316         movlw   0x0C            ; PWM mode, PWM MSB = 0
005D 0097           00317         movwf   CCP1CON         ; Initially PWM = 0%
005E 0191           00318         clrf    TMR2
005F 3004           00319         movlw   0x04            ; Timer 2 prescale 1:1, enable Timer 2
0060 0092           00320         movwf   T2CON
                    00321 
0061 3017           00322         movlw   SPBRG_9600      ; 9600 BAUD default
0062 00AA           00323         movwf   OUR_SPBRG
                    00324 
0063 2334           00325         call    Check_DIP_Switch
                    00326 
0064 082A           00327         movfw   OUR_SPBRG       ; Load Baud Rate Generator
                    00328 ; ------------- BANK 1 ------------------------------------------------------
0065 1683           00329         bsf     STATUS, RP0     ; select BANK 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0066 0099           00330         movwf   SPBRG           ; Load Baud Rate Generator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0067 168C           00331         bsf     PIE1, RCIE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0068 140C           00332         bsf     PIE1, TMR1IE    ; Enable Timer1 Interrupt
                    00333 ;        bsf     PIE1, TMR2IE    ; Enable Timer2 Interrupt
0069 3020           00334         movlw   0x20            ; TXEN=1, SYNC=0, BRGH=0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
006A 0098           00335         movwf   TXSTA
006B 30EF           00336         movlw   0xEF            ; OPTION REGISTER - TMR0 src (Capture Input)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
006C 0081           00337         movwf   OPTION_REG
                    00338 
                    00339 ; ------------- BANK 0 ------------------------------------------------------
006D 1283           00340         bcf     STATUS, RP0         ; select BANK 0
006E 0181           00341         clrf    TMR0
006F 3090           00342         movlw   0x90                ; UART: SPEN=1, CREN=1
0070 0098           00343         movwf   RCSTA               ; RS-485/232 setup
                    00344 
0071                00345 Start_LED_On
0071 0064           00346         clrwdt                      ; Kick the dog
0072 3001           00347         movlw   TRUE                ; Set LED on flag
0073 00A7           00348         movwf   LED_ON_FLAG
0074 1685           00349         bsf     PORTA, LED_BIT      ; LED ON
                    00350 
0075                00351 Start_RS232
0075 3044           00352         movlw   RamBank0+0X24   ; Set the RCV buffer pointer for RS-232
0076 00D0           00353         movwf   RCV_BUFFER_ST
0077 00BF           00354         movwf   RCV_BUFFER_PTR
                    00355 
                    00356         ; On any INITIALIZATION error, goto Start_LED_On
                    00357 
0078                00358 Start_Read_Eeprom
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0078 3003           00359         movlw   EE_PORT2_DIR    ; Direction PORT2 (PORTB)
0079 23A0           00360         call    Read_EEPROM
007A 00B6           00361         movwf   OUR_TRISB
007B 1683           00362         bsf     STATUS, RP0     ; select BANK 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
007C 0086           00363         movwf   TRISB           ; set direction PORT B
007D 1283           00364         bcf     STATUS, RP0     ; select BANK 0
                    00365 
                    00366         ;
                    00367         ; Read the EEPROM configuration registers
                    00368         ;
007E 230B           00369         call    Read_EEPROM_Config
                    00370 
007F 3019           00371         movlw   EE_STREAM_DIG       ; Get stream DIGITAL EEPROM setting
0080 23A0           00372         call    Read_EEPROM
0081 00DC           00373         movwf   STREAM_DIG
0082 301A           00374         movlw   EE_STREAM_COUNT     ; Get stream COUNT EEPROM setting
0083 23A0           00375         call    Read_EEPROM
0084 00DD           00376         movwf   STREAM_COUNT
0085 3010           00377         movlw   EE_STREAM_ANALOG    ; Get stream ANALOG EEPROM setting
0086 23A0           00378         call    Read_EEPROM
0087 00DB           00379         movwf   STREAM_ANALOG
                    00380 
0088 3007           00381         movlw   EE_PORT2_DEF    ; Default power up output values for PORT2 (PORTB)
0089 23A0           00382         call    Read_EEPROM
008A 065E           00383         xorwf   EXPANDER, W     ; EXPANDER Opto-22 inversion
008B 0086           00384         movwf   PORTB
                    00385 
008C 300A           00386         movlw   EE_DAC0_LSB     ; DAC Channel 0 power up default settings
008D 23A0           00387         call    Read_EEPROM
008E 00F1           00388         movwf   DAC0_LSB
008F 3009           00389         movlw   EE_DAC0_MSB
0090 23A0           00390         call    Read_EEPROM
0091 00F0           00391         movwf   DAC0_MSB
0092 300C           00392         movlw   EE_DAC1_LSB     ; DAC Channel 1 power up default settings
0093 23A0           00393         call    Read_EEPROM
0094 00F3           00394         movwf   DAC1_LSB
0095 300B           00395         movlw   EE_DAC1_MSB
0096 23A0           00396         call    Read_EEPROM
0097 00F2           00397         movwf   DAC1_MSB
0098 238D           00398         call    Update_DAC      ; Update the DAC with the new values
                    00399 
0099 0806           00400         movfw   PORTB           ; Establish the Previous values for ASYNC updates
009A 00E0           00401         movwf   PREV_PORTB
009B 0801           00402         movfw   TMR0
009C 00E2           00403         movwf   PREV_TMR0
009D 087A           00404         movfw   TMR0H
009E 00E3           00405         movwf   PREV_TMR0H
                    00406 
009F 081A           00407         movfw   RCREG           ; Clear interrupts before enabling
00A0 100C           00408         bcf     PIR1, TMR1IF    ; clear the Timer 1 Irq
00A1 108C           00409         bcf     PIR1, TMR2IF
00A2 30E0           00410         movlw   0xe0            ; Enable interrupts, enable TMR0 irq
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A3 008B           00411         movwf   INTCON
                    00412 
00A4 238D           00413         call    Update_DAC      ; Update the default Power On values
                    00414 
00A5 01A2           00415         clrf    STRING_INDEX
00A6                00416 Printf_Startup                      ; Display the startup string
00A6 0822           00417         movfw   STRING_INDEX
00A7 2500           00418         call    Startup_String
00A8 3A00           00419         xorlw   0x00
00A9 1903           00420         btfsc   STATUS, Z
00AA 28AE           00421         goto    Printf_Startup_end
00AB 2357           00422         call    Transmit_Char
00AC 0AA2           00423         incf    STRING_INDEX, F
00AD 28A6           00424         goto    Printf_Startup
00AE                00425 Printf_Startup_end
                    00426 
                    00427 
                    00428 ;----------------------------------------------------------------------------
                    00429 ; Main processing loop.
                    00430 ;
00AE                00431 Main_Loop
00AE 0064           00432         clrwdt                      ; Kick the dog
00AF 2334           00433         call    Check_DIP_Switch    ; Check the DIP switch in case some smart ass changed it
00B0 0851           00434         movfw   RCV_LAST_CHAR       ; Check the last character RCVD
00B1 3A0D           00435         xorlw   0x0D                ; Is this a CR?
00B2 1903           00436         btfsc   STATUS, Z
00B3 28FF           00437         goto    Main_Loop_Parse
                    00438 
00B4                00439 Main_Loop_Check_Async
00B4 08D3           00440         movf    ASYNC_CONFIG, F     ; Are we in ASYNC mode?
00B5 1903           00441         btfsc   STATUS, Z
00B6 28DF           00442         goto    Main_Loop_Check_Stream
                    00443 
00B7 0853           00444         movfw   ASYNC_CONFIG        ; Is this Mode 1?
00B8 3A01           00445         xorlw   0x01                ; ASYNC UPDATE ON CHANGE (DELTA)
00B9 1D03           00446         btfss   STATUS, Z
00BA 28D2           00447         goto    Main_Loop_Async_Timed
                    00448 
00BB                00449 Main_Loop_Async_Delta
00BB 0806           00450         movfw   PORTB               ; Check if PORTB has changed
00BC 0660           00451         xorwf   PREV_PORTB, W
00BD 1D03           00452         btfss   STATUS, Z
00BE 28C8           00453         goto    Main_Loop_Async_I
                    00454 
00BF 0801           00455         movfw   TMR0                ; Check if TMR0 has changed
00C0 0662           00456         xorwf   PREV_TMR0, W
00C1 1D03           00457         btfss   STATUS, Z
00C2 28CC           00458         goto    Main_Loop_Async_N
                    00459 
00C3 087A           00460         movfw   TMR0H               ; Check if TMR0H has changed
00C4 0663           00461         xorwf   PREV_TMR0H, W
00C5 1D03           00462         btfss   STATUS, Z
00C6 28CC           00463         goto    Main_Loop_Async_N
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00464 
00C7 28DF           00465         goto    Main_Loop_Check_Stream
                    00466 
00C8                00467 Main_Loop_Async_I
00C8 0806           00468         movfw   PORTB           ; Establish the Previous values for ASYNC updates
00C9 00E0           00469         movwf   PREV_PORTB
00CA 211D           00470         call    Process_I
00CB 28DF           00471         goto    Main_Loop_Check_Stream
                    00472 
00CC                00473 Main_Loop_Async_N
00CC 0801           00474         movfw   TMR0
00CD 00E2           00475         movwf   PREV_TMR0
00CE 087A           00476         movfw   TMR0H
00CF 00E3           00477         movwf   PREV_TMR0H
00D0 219E           00478         call    Process_N
00D1 28DF           00479         goto    Main_Loop_Check_Stream
                    00480 
00D2                00481 Main_Loop_Async_Timed
                    00482 
00D2 0854           00483         movfw   ASYNC_TIME_H
00D3 0223           00484         subwf   RUNNING_CNT_H, W
00D4 1C03           00485         btfss   STATUS, C
00D5 28DF           00486         goto    Main_Loop_Check_Stream
00D6 0855           00487         movfw   ASYNC_TIME_L
00D7 0224           00488         subwf   RUNNING_CNT_L, W
00D8 1C03           00489         btfsS   STATUS, C
00D9 28DF           00490         goto    Main_Loop_Check_Stream
                    00491 
00DA 138B           00492         bcf     INTCON, GIE         ; Disable interrupts so these clears work
00DB 01A3           00493         clrf    RUNNING_CNT_H
00DC 01A4           00494         clrf    RUNNING_CNT_L
00DD 178B           00495         bsf     INTCON, GIE
00DE 28E2           00496         goto    Main_Loop_Stream    ; ASYNC Update with the Stream configuration
                    00497 
                    00498 
00DF                00499 Main_Loop_Check_Stream
00DF 08D2           00500         movf    STREAM, F           ; Are we in STREAM Mode?
00E0 1903           00501         btfsc   STATUS, Z
00E1 28AE           00502         goto    Main_Loop
                    00503 
00E2                00504 Main_Loop_Stream
00E2 08DC           00505         movf    STREAM_DIG, F       ; Check stream DIGITAL
00E3 1903           00506         btfsc   STATUS, Z
00E4 28E6           00507         goto    Main_Check_Cont1
00E5 211D           00508         call    Process_I           ; Process DIGITAL
                    00509 
00E6                00510 Main_Check_Cont1
00E6 08DD           00511         movf    STREAM_COUNT, F     ; Check stream COUNT
00E7 1903           00512         btfsc   STATUS, Z
00E8 28EA           00513         goto    Main_Check_Cont2
00E9 219E           00514         call    Process_N           ; Process CAPTURE
                    00515 
00EA                00516 Main_Check_Cont2
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00EA 08DB           00517         movf    STREAM_ANALOG, F    ; Check stream ANALOG
00EB 1903           00518         btfsc   STATUS, Z
00EC 28AE           00519         goto    Main_Loop
00ED 3010           00520         movlw   EE_STREAM_ANALOG    ; Get stream ANALOG EEPROM setting
00EE 23A0           00521         call    Read_EEPROM
00EF 3903           00522         andlw   0x03                ; Limit count to 3
00F0 00D9           00523         movwf   STREAM_ANALOG_CNT
00F1 01DA           00524         clrf    STREAM_CH           ; Clear the current stream channel
00F2                00525 Main_Check_Cont3
00F2 0859           00526         movfw   STREAM_ANALOG_CNT   ; Are we done with ANALOG?
00F3 1903           00527         btfsc   STATUS, Z
00F4 28AE           00528         goto    Main_Loop
00F5 085A           00529         movfw   STREAM_CH           ; Compute the current channel
00F6 3E11           00530         addlw   EE_ANALOG_CFG_BASE
00F7 23A0           00531         call    Read_EEPROM         ; Read the ANALOG control from EEPROM
00F8 00B2           00532         movwf   CONTROL_ANALOG
00F9 300F           00533         movlw   0x0F                ; Mask OFF unipolar/bipolar bit
00FA 05B2           00534         andwf   CONTROL_ANALOG, F
00FB 2155           00535         call    Process_Analog
00FC 03D9           00536         decf    STREAM_ANALOG_CNT, F    ; Decr ANALOG query count
00FD 0ADA           00537         incf    STREAM_CH, F            ; Next channel
00FE 28F2           00538         goto    Main_Check_Cont3
                    00539 
                    00540 
00FF                00541 Main_Loop_Parse
                    00542 ;
                    00543 ; Parse incoming message
                    00544 ;
00FF 01D1           00545         clrf    RCV_LAST_CHAR       ; Clear last char rcvd.
                    00546 
0100                00547 Main_Loop_Check_V
0100 083F           00548         movfw   RCV_BUFFER_PTR      ; Save off Current Buffer ptr (before it moves)
0101 00E4           00549         movwf   CURRENT_PTR
0102 3056           00550         movlw   'V'                 ; VERSION command
0103 0644           00551         xorwf   RCV_BUFFER+4, W
0104 1D03           00552         btfss   STATUS, Z
0105 2913           00553         goto    Main_Loop_Check_I
0106 3046           00554         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
0107 0664           00555         xorwf   CURRENT_PTR, W
0108 1D03           00556         btfss   STATUS, Z
0109 2B04           00557         goto    Main_Loop_Error_Response
                    00558                                     ; Command/Packet OK
010A 3056           00559         movlw   'V'
010B 2357           00560         call    Transmit_Char
010C 3033           00561         movlw   VERSION_MAJOR       ; Respond with Firmware version
010D 2357           00562         call    Transmit_Char
010E 3032           00563         movlw   VERSION_MINOR       ; Respond with Firmware version
010F 2357           00564         call    Transmit_Char
0110 300D           00565         movlw   0x0D
0111 2357           00566         call    Transmit_Char
0112 2B08           00567         goto    Main_Loop_Rcv_End
                    00568 
0113                00569 Main_Loop_Check_I
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0113 3049           00570         movlw   'I'                 ; DIGITAL INPUTS command
0114 0644           00571         xorwf   RCV_BUFFER+4, W
0115 1D03           00572         btfss   STATUS, Z
0116 2932           00573         goto    Main_Loop_Check_O
0117 3046           00574         movlw   RCV_BUFFER+0x06    ; Check for correct command/packet length
0118 0664           00575         xorwf   CURRENT_PTR, W
0119 1D03           00576         btfss   STATUS, Z
011A 2B04           00577         goto    Main_Loop_Error_Response
                    00578                                     ; Command/Packet OK
011B 211D           00579         call    Process_I
011C 2B08           00580         goto    Main_Loop_Rcv_End
                    00581 
011D                00582 Process_I
011D 3049           00583         movlw   'I'
011E 2357           00584         call    Transmit_Char
011F 3030           00585         movlw   '0'                 ; PORT 1 = UNUSED send 00's
0120 2357           00586         call    Transmit_Char
0121 3030           00587         movlw   '0'                 ; PORT 1 = UNUSED send 00's
0122 2357           00588         call    Transmit_Char
0123 0806           00589         movfw   PORTB               ; PORT 2 = PORT B - MSB
0124 065E           00590         xorwf   EXPANDER, W         ; EXPANDER Opto-22 inversion
0125 39F0           00591         andlw   0xF0
0126 00B1           00592         movwf   SCRATCH             ; Rotate to LSB
0127 0E31           00593         swapf   SCRATCH, W          ; swap the nibble to low order
0128 2530           00594         call    Nibble_To_Hex
0129 2357           00595         call    Transmit_Char
012A 0806           00596         movfw   PORTB               ; PORT 2 = PORT B - LSB
012B 065E           00597         xorwf   EXPANDER, W         ; EXPANDER Opto-22 inversion
012C 390F           00598         andlw   0x0F
012D 2530           00599         call    Nibble_To_Hex
012E 2357           00600         call    Transmit_Char
012F 300D           00601         movlw   0x0D
0130 2357           00602         call    Transmit_Char
0131 0008           00603         return
                    00604 
0132                00605 Main_Loop_Check_O
0132 304F           00606         movlw   'O'                 ; DIGITAL OUTPUT command
0133 0644           00607         xorwf   RCV_BUFFER+4, W
0134 1D03           00608         btfss   STATUS, Z
0135 2948           00609         goto    Main_Loop_Check_U
0136 304A           00610         movlw   RCV_BUFFER+0x0A     ; Check for correct command/packet length
0137 0664           00611         xorwf   CURRENT_PTR, W
0138 1D03           00612         btfss   STATUS, Z
0139 2B04           00613         goto    Main_Loop_Error_Response
                    00614                                     ; Command/Packet OK
                    00615         ;
                    00616         ; Ignore PORT 1 data characters 5 and 6
                    00617         ;
                    00618 
013A 0847           00619         movfw   RCV_BUFFER+7        ; Get the PORT 2 (PORT B) - MSB
013B 23D2           00620         call    Hex_To_Nibble
013C 00B1           00621         movwf   SCRATCH
013D 0EB1           00622         swapf   SCRATCH, F          ; swap the nibble to low order
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

013E 0848           00623         movfw   RCV_BUFFER+8        ; Get the PORT 2 (PORT B) - LSB
013F 23D2           00624         call    Hex_To_Nibble
0140 0431           00625         iorwf   SCRATCH, W
0141 065E           00626         xorwf   EXPANDER, W         ; EXPANDER Opto-22 inversion
0142 0086           00627         movwf   PORTB
                    00628 
0143 304F           00629         movlw   'O'
0144 2357           00630         call    Transmit_Char
0145 300D           00631         movlw   0x0D                ; CR
0146 2357           00632         call    Transmit_Char
0147 2B08           00633         goto    Main_Loop_Rcv_End
                    00634 
0148                00635 Main_Loop_Check_U
0148 3055           00636         movlw   'U'                 ; UNIPOLAR SAMPLE ANALOG command
0149 0644           00637         xorwf   RCV_BUFFER+4, W
014A 1D03           00638         btfss   STATUS, Z
014B 2967           00639         goto    Main_Loop_Check_L
014C 3047           00640         movlw   RCV_BUFFER+0x07     ; Check for correct command/packet length
014D 0664           00641         xorwf   CURRENT_PTR, W
014E 1D03           00642         btfss   STATUS, Z
014F 2B04           00643         goto    Main_Loop_Error_Response
                    00644                                     ; Command/Packet OK
0150 0845           00645         movfw   RCV_BUFFER+5        ; Get the ANALOG CONTROL nibble
0151 23D2           00646         call    Hex_To_Nibble
0152 00B2           00647         movwf   CONTROL_ANALOG
0153 2155           00648         call    Process_Analog
0154 2B08           00649         goto    Main_Loop_Rcv_End
                    00650 
0155                00651 Process_Analog
0155 235F           00652         call    Acquire_Sample_1861 ; Acquire the sample from ADC
0156 3055           00653         movlw   'U'                 ; UNIPOLAR
0157 2357           00654         call    Transmit_Char
0158 0832           00655         movfw   CONTROL_ANALOG      ; Return the Analog Control nibble
0159 2530           00656         call    Nibble_To_Hex
015A 2357           00657         call    Transmit_Char
015B 083A           00658         movfw   ADC_NIBBLE1
015C 2530           00659         call    Nibble_To_Hex
015D 2357           00660         call    Transmit_Char
015E 083B           00661         movfw   ADC_NIBBLE2
015F 2530           00662         call    Nibble_To_Hex
0160 2357           00663         call    Transmit_Char
0161 083C           00664         movfw   ADC_NIBBLE3
0162 2530           00665         call    Nibble_To_Hex
0163 2357           00666         call    Transmit_Char
0164 300D           00667         movlw   0x0D
0165 2357           00668         call    Transmit_Char
0166 0008           00669         return
                    00670 
0167                00671 Main_Loop_Check_L
0167 304C           00672         movlw   'L'                 ; ANALOG OUTPUT command
0168 0644           00673         xorwf   RCV_BUFFER+4, W
0169 1D03           00674         btfss   STATUS, Z
016A 2994           00675         goto    Main_Loop_Check_N
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

016B 304A           00676         movlw   RCV_BUFFER+0x0A     ; Check for correct command/packet length
016C 0664           00677         xorwf   CURRENT_PTR, W
016D 1D03           00678         btfss   STATUS, Z
016E 2B04           00679         goto    Main_Loop_Error_Response
                    00680                                     ; Command/Packet length OK
                    00681 
016F 3030           00682         movlw   '0'                 ; Check if CH0
0170 0645           00683         xorwf   RCV_BUFFER+5, W
0171 1D03           00684         btfss   STATUS, Z
0172 297F           00685         goto    Main_Loop_Check_L1
                    00686                                     ; We're working on Channel 0
0173 0846           00687         movfw   RCV_BUFFER+6        ; Get 1st nibble of 12 bit DAC value
0174 23D2           00688         call    Hex_To_Nibble
0175 00F0           00689         movwf   DAC0_MSB
0176 0847           00690         movfw   RCV_BUFFER+7        ; Get 2nd nibble of 12 bit DAC value
0177 23D2           00691         call    Hex_To_Nibble
0178 00B1           00692         movwf   SCRATCH
0179 0EB1           00693         swapf   SCRATCH, F          ; swap nibble in MSB location
017A 0848           00694         movfw   RCV_BUFFER+8        ; Get 3rd nibble of 12 bit DAC value
017B 23D2           00695         call    Hex_To_Nibble
017C 0431           00696         iorwf   SCRATCH, W
017D 00F1           00697         movwf   DAC0_LSB
017E 298E           00698         goto    Main_Loop_Check_Lx
                    00699 
017F                00700 Main_Loop_Check_L1
017F 3031           00701         movlw   '1'                 ; Check if CH1
0180 0645           00702         xorwf   RCV_BUFFER+5, W
0181 1D03           00703         btfss   STATUS, Z
0182 2B04           00704         goto    Main_Loop_Error_Response
                    00705                                     ; We're working on Channel 1
0183 0846           00706         movfw   RCV_BUFFER+6        ; Get 1st nibble of 12 bit DAC value
0184 23D2           00707         call    Hex_To_Nibble
0185 00F2           00708         movwf   DAC1_MSB
0186 0847           00709         movfw   RCV_BUFFER+7        ; Get 2nd nibble of 12 bit DAC value
0187 23D2           00710         call    Hex_To_Nibble
0188 00B1           00711         movwf   SCRATCH
0189 0EB1           00712         swapf   SCRATCH, F          ; swap nibble in MSB location
018A 0848           00713         movfw   RCV_BUFFER+8        ; Get 3rd nibble of 12 bit DAC value
018B 23D2           00714         call    Hex_To_Nibble
018C 0431           00715         iorwf   SCRATCH, W
018D 00F3           00716         movwf   DAC1_LSB
                    00717 
018E                00718 Main_Loop_Check_Lx
018E 238D           00719         call    Update_DAC          ; Update the DAC with the new value
018F 304C           00720         movlw   'L'
0190 2357           00721         call    Transmit_Char
0191 300D           00722         movlw   0x0D
0192 2357           00723         call    Transmit_Char
0193 2B08           00724         goto    Main_Loop_Rcv_End
                    00725 
                    00726 
0194                00727 Main_Loop_Check_N
0194 304E           00728         movlw   'N'                 ; CAPTURE COUNT command
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0195 0644           00729         xorwf   RCV_BUFFER+4, W
0196 1D03           00730         btfss   STATUS, Z
0197 29D5           00731         goto    Main_Loop_Check_M
0198 3046           00732         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
0199 0664           00733         xorwf   CURRENT_PTR, W
019A 1D03           00734         btfss   STATUS, Z
019B 2B04           00735         goto    Main_Loop_Error_Response
                    00736                                     ; Command/Packet OK
019C 219E           00737         call    Process_N
019D 2B08           00738         goto    Main_Loop_Rcv_End
                    00739 
019E                00740 Process_N
019E 304E           00741         movlw   'N'
019F 2357           00742         call    Transmit_Char
01A0 138B           00743         bcf     INTCON, GIE         ; Disable interupts
01A1 0801           00744         movfw   TMR0                ; Get TMR0 count
01A2 00F7           00745         movwf   OUR_TMR0L           ; save local copy so count does during output
01A3 087A           00746         movfw   TMR0H
01A4 00F6           00747         movwf   OUR_TMR0H
01A5 0878           00748         movfw   TMR0H_MSB
01A6 00F4           00749         movwf   OUR_TMR0H_MSB
01A7 0879           00750         movfw   TMR0L_MSB
01A8 00F5           00751         movwf   OUR_TMR0L_MSB
01A9 178B           00752         bsf     INTCON, GIE         ; Enable interrupts
                    00753 
01AA 0874           00754         movfw   OUR_TMR0H_MSB       ; BYTE 4
01AB 39F0           00755         andlw   0xF0                ; Most significant nibble
01AC 00B1           00756         movwf   SCRATCH
01AD 0E31           00757         swapf   SCRATCH, W          ; swap nibble to low order
01AE 2530           00758         call    Nibble_To_Hex
01AF 2357           00759         call    Transmit_Char
01B0 0874           00760         movfw   OUR_TMR0H_MSB
01B1 390F           00761         andlw   0x0F
01B2 2530           00762         call    Nibble_To_Hex
01B3 2357           00763         call    Transmit_Char
01B4 0875           00764         movfw   OUR_TMR0L_MSB       ; BYTE 3
01B5 39F0           00765         andlw   0xF0                ; Most significant nibble
01B6 00B1           00766         movwf   SCRATCH
01B7 0E31           00767         swapf   SCRATCH, W          ; swap nibble to low order
01B8 2530           00768         call    Nibble_To_Hex
01B9 2357           00769         call    Transmit_Char
01BA 0875           00770         movfw   OUR_TMR0L_MSB
01BB 390F           00771         andlw   0x0F
01BC 2530           00772         call    Nibble_To_Hex
01BD 2357           00773         call    Transmit_Char
01BE 0876           00774         movfw   OUR_TMR0H           ; BYTE 2
01BF 39F0           00775         andlw   0xF0                ; Most significant nibble
01C0 00B1           00776         movwf   SCRATCH
01C1 0E31           00777         swapf   SCRATCH, W          ; swap nibble to low order
01C2 2530           00778         call    Nibble_To_Hex
01C3 2357           00779         call    Transmit_Char
01C4 0876           00780         movfw   OUR_TMR0H
01C5 390F           00781         andlw   0x0F
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C6 2530           00782         call    Nibble_To_Hex
01C7 2357           00783         call    Transmit_Char
01C8 0877           00784         movfw   OUR_TMR0L           ; BYTE 1
01C9 39F0           00785         andlw   0xF0                ; Most significant nibble
01CA 00B1           00786         movwf   SCRATCH
01CB 0E31           00787         swapf   SCRATCH, W          ; swap nibble to low order
01CC 2530           00788         call    Nibble_To_Hex
01CD 2357           00789         call    Transmit_Char
01CE 0877           00790         movfw   OUR_TMR0L
01CF 390F           00791         andlw   0x0F
01D0 2530           00792         call    Nibble_To_Hex
01D1 2357           00793         call    Transmit_Char
01D2 300D           00794         movlw   0x0D
01D3 2357           00795         call    Transmit_Char
01D4 0008           00796         return
                    00797 
01D5                00798 Main_Loop_Check_M
01D5 304D           00799         movlw   'M'                 ; CLEAR CAPTURE COUNT command
01D6 0644           00800         xorwf   RCV_BUFFER+4, W
01D7 1D03           00801         btfss   STATUS, Z
01D8 29E9           00802         goto    Main_Loop_Check_T
01D9 3046           00803         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
01DA 0664           00804         xorwf   CURRENT_PTR, W
01DB 1D03           00805         btfss   STATUS, Z
01DC 2B04           00806         goto    Main_Loop_Error_Response
                    00807                                     ; Command/Packet OK
                    00808 
01DD 138B           00809         bcf     INTCON, GIE         ; Disable interupts
01DE 0181           00810         clrf    TMR0                ; Clear the Timer0 counts
01DF 01FA           00811         clrf    TMR0H
01E0 01F8           00812         clrf    TMR0H_MSB
01E1 01F9           00813         clrf    TMR0L_MSB
01E2 110B           00814         bcf     INTCON, T0IF        ; Clear TMR0 interrupt flag
01E3 178B           00815         bsf     INTCON, GIE         ; Enable interrupts
01E4 304D           00816         movlw   'M'
01E5 2357           00817         call    Transmit_Char
01E6 300D           00818         movlw   0x0D
01E7 2357           00819         call    Transmit_Char
01E8 2B08           00820         goto    Main_Loop_Rcv_End
                    00821 
01E9                00822 Main_Loop_Check_T
01E9 3054           00823         movlw   'T'                 ; SET DIGITAL DIRECTION command
01EA 0644           00824         xorwf   RCV_BUFFER+4, W
01EB 1D03           00825         btfss   STATUS, Z
01EC 2A05           00826         goto    Main_Loop_Check_G
01ED 304A           00827         movlw   RCV_BUFFER+0x0A     ; Check for correct command/packet length
01EE 0664           00828         xorwf   CURRENT_PTR, W
01EF 1D03           00829         btfss   STATUS, Z
01F0 2B04           00830         goto    Main_Loop_Error_Response
                    00831                                     ; Command/Packet OK
                    00832         ;
                    00833         ; Ignore PORT 1 characters 5 and 6
                    00834         ;
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00835 
01F1 0847           00836         movfw   RCV_BUFFER+7        ; Get the PORT 2 (PORT B) - MSB
01F2 23D2           00837         call    Hex_To_Nibble
01F3 00B1           00838         movwf   SCRATCH
01F4 0EB1           00839         swapf   SCRATCH, F          ; swap the nibble to low order
01F5 0848           00840         movfw   RCV_BUFFER+8        ; Get the PORT 2 (PORT B) - LSB
01F6 23D2           00841         call    Hex_To_Nibble
01F7 0431           00842         iorwf   SCRATCH, W
01F8 00B6           00843         movwf   OUR_TRISB
01F9 1683           00844         bsf     STATUS, RP0         ; select BANK 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FA 0086           00845         movwf   TRISB               ; set direction PORT B
01FB 1283           00846         bcf     STATUS, RP0         ; select BANK 0
                    00847 
01FC 3003           00848         movlw   EE_PORT2_DIR        ; save PORT2 TRIS registers in EEPROM
01FD 00A8           00849         movwf   EEPROM_ADDRESS
01FE 0836           00850         movfw   OUR_TRISB
01FF 23AC           00851         call    Write_EEPROM
                    00852 
0200 3054           00853         movlw   'T'                 ; EEPROM Write delayed enough already
0201 2357           00854         call    Transmit_Char
0202 300D           00855         movlw   0x0D                ; CR
0203 2357           00856         call    Transmit_Char
0204 2B08           00857         goto    Main_Loop_Rcv_End
                    00858 
0205                00859 Main_Loop_Check_G
0205 3047           00860         movlw   'G'                 ; GET DATA DIRECTION command
0206 0644           00861         xorwf   RCV_BUFFER+4, W
0207 1D03           00862         btfss   STATUS, Z
0208 2A20           00863         goto    Main_Loop_Check_P
0209 3046           00864         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
020A 0664           00865         xorwf   CURRENT_PTR, W
020B 1D03           00866         btfss   STATUS, Z
020C 2B04           00867         goto    Main_Loop_Error_Response
                    00868                                     ; Command/Packet OK
020D 3047           00869         movlw   'G'
020E 2357           00870         call    Transmit_Char
020F 3030           00871         movlw   '0'                 ; PORT 1 - UNUSED send 00's
0210 2357           00872         call    Transmit_Char
0211 3030           00873         movlw   '0'                 ; PORT 1 - UNUSED send 00's
0212 2357           00874         call    Transmit_Char
0213 0836           00875         movfw   OUR_TRISB           ; PORT 2 = PORT B data direction
0214 39F0           00876         andlw   0xF0                ; TMR0H - MSB
0215 00B1           00877         movwf   SCRATCH             ; Rotate to LSB
0216 0E31           00878         swapf   SCRATCH, W          ; swap the nibble to low order
0217 2530           00879         call    Nibble_To_Hex
0218 2357           00880         call    Transmit_Char
0219 0836           00881         movfw   OUR_TRISB           ; PORT 2 = PORTB data direction
021A 390F           00882         andlw   0x0F
021B 2530           00883         call    Nibble_To_Hex
021C 2357           00884         call    Transmit_Char
021D 300D           00885         movlw   0x0D
021E 2357           00886         call    Transmit_Char
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

021F 2B08           00887         goto    Main_Loop_Rcv_End
                    00888 
0220                00889 Main_Loop_Check_P
0220 3050           00890         movlw   'P'                 ; PWM command
0221 0644           00891         xorwf   RCV_BUFFER+4, W
0222 1D03           00892         btfss   STATUS, Z
0223 2A56           00893         goto    Main_Loop_Check_W
0224 304B           00894         movlw   RCV_BUFFER+0x0B     ; Check for correct command/packet length
0225 0664           00895         xorwf   CURRENT_PTR, W
0226 1D03           00896         btfss   STATUS, Z
0227 2B04           00897         goto    Main_Loop_Error_Response
                    00898                                     ; Command/Packet OK
0228 0845           00899         movfw   RCV_BUFFER+5        ; Get the PWM_DIVISOR
0229 23D2           00900         call    Hex_To_Nibble
022A 00B1           00901         movwf   SCRATCH
022B 0EB1           00902         swapf   SCRATCH, F          ; swap the nibble to low order
022C 0846           00903         movfw   RCV_BUFFER+6        ; Get the PWM_DIVISOR
022D 23D2           00904         call    Hex_To_Nibble
022E 0431           00905         iorwf   SCRATCH, W
022F 00E7           00906         movwf   PWM_DIVISOR
0230 1683           00907         bsf     STATUS, RP0         ; select BANK 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0231 0092           00908         movwf   PR2                 ; set PWM_DIVISOR PR2 value
0232 1283           00909         bcf     STATUS, RP0         ; select BANK 0
                    00910 
0233 0847           00911         movfw   RCV_BUFFER+7        ; Get the PWM_DUTY (MSB)
0234 23D2           00912         call    Hex_To_Nibble
0235 3903           00913         andlw   0x03                ; Mask off everything but bits 0-1
0236 00B1           00914         movwf   SCRATCH
0237 0EB1           00915         swapf   SCRATCH, F          ; swap the nibble to low order
0238 0848           00916         movfw   RCV_BUFFER+8        ; Get the PWM_DUTY (MSB)
0239 23D2           00917         call    Hex_To_Nibble
023A 04B1           00918         iorwf   SCRATCH, F
023B 1003           00919         bcf     STATUS, C           ; Clear the carry before rotate
023C 0DB1           00920         rlf     SCRATCH, F
023D 0D31           00921         rlf     SCRATCH, W          ; last rotate keep in W
023E 00E6           00922         movwf   PWM_MSB             ; save
023F 0849           00923         movfw   RCV_BUFFER+9
0240 23D2           00924         call    Hex_To_Nibble
0241 390C           00925         andlw   0x0C
0242 00B1           00926         movwf   SCRATCH
0243 1003           00927         bcf     STATUS, C           ; Clear the carry before rotate
0244 0CB1           00928         rrf     SCRATCH, F
0245 0C31           00929         rrf     SCRATCH, W          ; last rotate keep in W
0246 0466           00930         iorwf   PWM_MSB, W
0247 0095           00931         movwf   CCPR1L              ; Make it so
0248 00E6           00932         movwf   PWM_MSB             ; save off
                    00933 
0249 0849           00934         movfw   RCV_BUFFER+9        ; Get the PWM_DUTY (LSB)
024A 23D2           00935         call    Hex_To_Nibble
024B 3903           00936         andlw   0x03                ; Mask off everything but bits 0-1
024C 00E5           00937         movwf   PWM_LSB
024D 00B1           00938         movwf   SCRATCH
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

024E 0E31           00939         swapf   SCRATCH, W          ; swap the nibble to low order
024F 380C           00940         iorlw   0x0C                ; OR in the PWM mode code
0250 0097           00941         movwf   CCP1CON             ; make it so
                    00942 
0251 3050           00943         movlw   'P'                 ; EEPROM Write delayed enough already
0252 2357           00944         call    Transmit_Char
0253 300D           00945         movlw   0x0D                ; CR
0254 2357           00946         call    Transmit_Char
0255 2B08           00947         goto    Main_Loop_Rcv_End
                    00948 
0256                00949 Main_Loop_Check_W
0256 3057           00950         movlw   'W'                 ; WRITE EEPROM command
0257 0644           00951         xorwf   RCV_BUFFER+4, W
0258 1D03           00952         btfss   STATUS, Z
0259 2A73           00953         goto    Main_Loop_Check_R
025A 304A           00954         movlw   RCV_BUFFER+0x0A     ; Check for correct command/packet length
025B 0664           00955         xorwf   CURRENT_PTR, W
025C 1D03           00956         btfss   STATUS, Z
025D 2B04           00957         goto    Main_Loop_Error_Response
                    00958                                     ; Command/Packet OK
025E 0845           00959         movfw   RCV_BUFFER+5        ; Get the EEPROM ADDRESS - MSB
025F 23D2           00960         call    Hex_To_Nibble
0260 00B1           00961         movwf   SCRATCH
0261 0EB1           00962         swapf   SCRATCH, F          ; swap the nibble to low order
0262 0846           00963         movfw   RCV_BUFFER+6        ; Get the EEPROM ADDRESS - LSB
0263 23D2           00964         call    Hex_To_Nibble
0264 0431           00965         iorwf   SCRATCH, W
0265 00A8           00966         movwf   EEPROM_ADDRESS
                    00967 
0266 0847           00968         movfw   RCV_BUFFER+7        ; Get the EEPROM VALUE - MSB
0267 23D2           00969         call    Hex_To_Nibble
0268 00B1           00970         movwf   SCRATCH
0269 0EB1           00971         swapf   SCRATCH, F          ; swap the nibble to low order
026A 0848           00972         movfw   RCV_BUFFER+8        ; Get the EEPROM VALUE - LSB
026B 23D2           00973         call    Hex_To_Nibble
026C 0431           00974         iorwf   SCRATCH, W
026D 23AC           00975         call    Write_EEPROM        ; Write value to EEPROM
                    00976 
026E 3057           00977         movlw   'W'                 ; EEPROM Write delayed enough already
026F 2357           00978         call    Transmit_Char
0270 300D           00979         movlw   0x0D                ; CR
0271 2357           00980         call    Transmit_Char
                    00981 
                    00982 ;        call    Read_EEPROM_Config  ; Read new EEPROM configuration values
                    00983 ; Don't read EEPROM Config every time since the Async Timed mode may start a ridiculous stream of data
                    00984 ;
0272 2B08           00985         goto    Main_Loop_Rcv_End
                    00986 
0273                00987 Main_Loop_Check_R
0273 3052           00988         movlw   'R'                 ; READ EEPROM command
0274 0644           00989         xorwf   RCV_BUFFER+4, W
0275 1D03           00990         btfss   STATUS, Z
0276 2A94           00991         goto    Main_Loop_Check_J
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0277 3048           00992         movlw   RCV_BUFFER+0x08     ; Check for correct command/packet length
0278 0664           00993         xorwf   CURRENT_PTR, W
0279 1D03           00994         btfss   STATUS, Z
027A 2B04           00995         goto    Main_Loop_Error_Response
                    00996                                     ; Command/Packet OK
027B 0845           00997         movfw   RCV_BUFFER+5        ; Get the EEPROM ADDRESS - MSB
027C 23D2           00998         call    Hex_To_Nibble
027D 00B1           00999         movwf   SCRATCH
027E 0EB1           01000         swapf   SCRATCH, F          ; swap the nibble to low order
027F 0846           01001         movfw   RCV_BUFFER+6        ; Get the EEPROM ADDRESS - LSB
0280 23D2           01002         call    Hex_To_Nibble
0281 0431           01003         iorwf   SCRATCH, W
0282 23A0           01004         call    Read_EEPROM
0283 00B1           01005         movwf   SCRATCH             ; Save the data
0284 00A8           01006         movwf   EEPROM_ADDRESS      ; Save off in EEPROM address also
                    01007 
0285 3052           01008         movlw   'R'
0286 2357           01009         call    Transmit_Char
0287 0831           01010         movfw   SCRATCH             ; Get the saved Data
0288 39F0           01011         andlw   0xF0                ; Send out the MSB
0289 00B1           01012         movwf   SCRATCH
028A 0E31           01013         swapf   SCRATCH, W          ; swap the nibble to low order
028B 2530           01014         call    Nibble_To_Hex
028C 2357           01015         call    Transmit_Char
028D 0828           01016         movfw   EEPROM_ADDRESS      ; Get the saved Data
028E 390F           01017         andlw   0x0F                ; Send out the LSB
028F 2530           01018         call    Nibble_To_Hex
0290 2357           01019         call    Transmit_Char
0291 300D           01020         movlw   0x0D
0292 2357           01021         call    Transmit_Char
0293 2B08           01022         goto    Main_Loop_Rcv_End
                    01023 
0294                01024 Main_Loop_Check_J
0294 304A           01025         movlw   'J'                 ; CLEAR RCV ERROR COUNT command
0295 0644           01026         xorwf   RCV_BUFFER+4, W
0296 1D03           01027         btfss   STATUS, Z
0297 2AA2           01028         goto    Main_Loop_Check_S
0298 3046           01029         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
0299 0664           01030         xorwf   CURRENT_PTR, W
029A 1D03           01031         btfss   STATUS, Z
029B 2B04           01032         goto    Main_Loop_Error_Response
                    01033                                     ; Command/Packet OK
029C 01B3           01034         clrf    RCV_ERROR_CNT
029D 304A           01035         movlw   'J'
029E 2357           01036         call    Transmit_Char
029F 300D           01037         movlw   0x0D
02A0 2357           01038         call    Transmit_Char
02A1 2B08           01039         goto    Main_Loop_Rcv_End
                    01040 
02A2                01041 Main_Loop_Check_S
02A2 3053           01042         movlw   'S'                 ; STREAM MODE command
02A3 0644           01043         xorwf   RCV_BUFFER+4, W
02A4 1D03           01044         btfss   STATUS, Z
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A5 2ABA           01045         goto    Main_Loop_Check_H
02A6 3046           01046         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
02A7 0664           01047         xorwf   CURRENT_PTR, W
02A8 1D03           01048         btfss   STATUS, Z
02A9 2B04           01049         goto    Main_Loop_Error_Response
                    01050                                     ; Command/Packet OK
02AA 3001           01051         movlw   0x01                ; Set STREAM FLAG
02AB 00D2           01052         movwf   STREAM
02AC 3019           01053         movlw   EE_STREAM_DIG       ; Get stream DIGITAL EEPROM setting
02AD 23A0           01054         call    Read_EEPROM
02AE 00DC           01055         movwf   STREAM_DIG
02AF 301A           01056         movlw   EE_STREAM_COUNT     ; Get stream COUNT EEPROM setting
02B0 23A0           01057         call    Read_EEPROM
02B1 00DD           01058         movwf   STREAM_COUNT
02B2 3010           01059         movlw   EE_STREAM_ANALOG    ; Get stream ANALOG EEPROM setting
02B3 23A0           01060         call    Read_EEPROM
02B4 00DB           01061         movwf   STREAM_ANALOG
                    01062 
02B5 3053           01063         movlw   'S'                 ; send response
02B6 2357           01064         call    Transmit_Char
02B7 300D           01065         movlw   0x0D
02B8 2357           01066         call    Transmit_Char
02B9 2B08           01067         goto    Main_Loop_Rcv_End
                    01068 
02BA                01069 Main_Loop_Check_H
02BA 3048           01070         movlw   'H'                 ; HALT STREAM MODE command
02BB 0644           01071         xorwf   RCV_BUFFER+4, W
02BC 1D03           01072         btfss   STATUS, Z
02BD 2AC8           01073         goto    Main_Loop_Check_Y
02BE 3046           01074         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
02BF 0664           01075         xorwf   CURRENT_PTR, W
02C0 1D03           01076         btfss   STATUS, Z
02C1 2B04           01077         goto    Main_Loop_Error_Response
                    01078                                     ; Command/Packet OK
02C2 01D2           01079         clrf    STREAM              ; Clear Stream Flag
02C3 3048           01080         movlw   'H'
02C4 2357           01081         call    Transmit_Char
02C5 300D           01082         movlw   0x0D
02C6 2357           01083         call    Transmit_Char
02C7 2B08           01084         goto    Main_Loop_Rcv_End
                    01085 
02C8                01086 Main_Loop_Check_Y
02C8 3059           01087         movlw   'Y'                 ; HOST ASYNC response
02C9 0644           01088         xorwf   RCV_BUFFER+4, W
02CA 1D03           01089         btfss   STATUS, Z
02CB 2ACE           01090         goto    Main_Loop_Check_Z
02CC 0000           01091         nop                         ; Don't respond!
02CD 2B08           01092         goto    Main_Loop_Rcv_End
                    01093 
02CE                01094 Main_Loop_Check_Z
02CE 305A           01095         movlw   'Z'                 ; RESET command
02CF 0644           01096         xorwf   RCV_BUFFER+4, W
02D0 1D03           01097         btfss   STATUS, Z
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D1 2ADB           01098         goto    Main_Loop_Check_Question
02D2 3046           01099         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
02D3 0664           01100         xorwf   CURRENT_PTR, W
02D4 1D03           01101         btfss   STATUS, Z
02D5 2B04           01102         goto    Main_Loop_Error_Response
                    01103                                     ; Command/Packet OK
02D6 305A           01104         movlw   'Z'
02D7 2357           01105         call    Transmit_Char
02D8 300D           01106         movlw   0x0D
02D9 2357           01107         call    Transmit_Char
02DA                01108 Main_Loop_Reset_Cpu                 ; Force a CPU reset by not kicking the DOG
02DA 2ADA           01109         goto    Main_Loop_Reset_Cpu
                    01110 
02DB                01111 Main_Loop_Check_Question
02DB 303F           01112         movlw   '?'                 ; ? command
02DC 0644           01113         xorwf   RCV_BUFFER+4, W
02DD 1D03           01114         btfss   STATUS, Z
02DE 2AED           01115         goto    Main_Loop_Check_K
02DF 3046           01116         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
02E0 0664           01117         xorwf   CURRENT_PTR, W
02E1 1D03           01118         btfss   STATUS, Z
02E2 2B04           01119         goto    Main_Loop_Error_Response
                    01120                                     ; Command/Packet OK
02E3 01A2           01121         clrf    STRING_INDEX
02E4                01122 Printf_Startup_Q                    ; Display the startup string
02E4 0822           01123         movfw   STRING_INDEX
02E5 2500           01124         call    Startup_String
02E6 3A00           01125         xorlw   0x00
02E7 1903           01126         btfsc   STATUS, Z
02E8 2AEC           01127         goto    Printf_Startup_end_Q
02E9 2357           01128         call    Transmit_Char
02EA 0AA2           01129         incf    STRING_INDEX, F
02EB 2AE4           01130         goto    Printf_Startup_Q
02EC                01131 Printf_Startup_end_Q
02EC 2B08           01132         goto    Main_Loop_Rcv_End
                    01133 
02ED                01134 Main_Loop_Check_K
02ED 304B           01135         movlw   'K'                 ; RCV ERRORS command
02EE 0644           01136         xorwf   RCV_BUFFER+4, W
02EF 1D03           01137         btfss   STATUS, Z
02F0 2B04           01138         goto    Main_Loop_Error_Response
02F1 3046           01139         movlw   RCV_BUFFER+0x06     ; Check for correct command/packet length
02F2 0664           01140         xorwf   CURRENT_PTR, W
02F3 1D03           01141         btfss   STATUS, Z
02F4 2B04           01142         goto    Main_Loop_Error_Response
                    01143                                     ; Command/Packet OK
02F5 304B           01144         movlw   'K'
02F6 2357           01145         call    Transmit_Char
02F7 0833           01146         movfw   RCV_ERROR_CNT       ; ERROR count - MSB
02F8 39F0           01147         andlw   0xF0
02F9 00B1           01148         movwf   SCRATCH             ; Rotate to LSB
02FA 0E31           01149         swapf   SCRATCH, W          ; swap the nibble to low order
02FB 2530           01150         call    Nibble_To_Hex
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02FC 2357           01151         call    Transmit_Char
02FD 0833           01152         movfw   RCV_ERROR_CNT        ; ERROR count - LSB
02FE 390F           01153         andlw   0x0F
02FF 2530           01154         call    Nibble_To_Hex
0300 2357           01155         call    Transmit_Char
0301 300D           01156         movlw   0x0D
0302 2357           01157         call    Transmit_Char
0303 2B08           01158         goto    Main_Loop_Rcv_End
                    01159 
0304                01160 Main_Loop_Error_Response
0304 3058           01161         movlw   'X'                 ; ERROR Response
0305 2357           01162         call    Transmit_Char
0306 300D           01163         movlw   0x0D
0307 2357           01164         call    Transmit_Char
                    01165 
0308                01166 Main_Loop_Rcv_End
0308 0850           01167         movfw   RCV_BUFFER_ST       ; Reset the RCV buffer pointer
0309 00BF           01168         movwf   RCV_BUFFER_PTR
030A 28AE           01169         goto    Main_Loop           ; Ready for new message
                    01170 
                    01171 
                    01172 ;----------------------------------------------------------------------------
                    01173 ; Reads EEPROM configuration values and updates RAM variables
                    01174 ;
030B                01175 Read_EEPROM_Config
030B 3005           01176         movlw   EE_ASYNC_CONFIG_LSB ; ASYNC update configuration
030C 23A0           01177         call    Read_EEPROM
030D 00D5           01178         movwf   ASYNC_TIME_L        ; Save off 16 bit value
030E 3004           01179         movlw   EE_ASYNC_CONFIG_MSB
030F 23A0           01180         call    Read_EEPROM
0310 00D4           01181         movwf   ASYNC_TIME_H
                    01182 
0311 3A00           01183         xorlw   0x00                ; See if High order byte == 0
0312 1903           01184         btfsc   STATUS, Z
0313 2B17           01185         goto    Read_EEPROM_Config_A
0314 3002           01186         movlw   0x02                ; ASYNC config mode 2 == TIMED UPDATE
0315 00D3           01187         movwf   ASYNC_CONFIG
0316 2B27           01188         goto    Read_EEPROM_Config_E
                    01189 
0317                01190 Read_EEPROM_Config_A
0317 0855           01191         movfw   ASYNC_TIME_L
0318 3A00           01192         xorlw   0x00                ; See if Low order byte == 0
0319 1D03           01193         btfss   STATUS, Z
031A 2B1E           01194         goto    Read_EEPROM_Config_B
031B 3000           01195         movlw   0x00                ; ASYNC config mode 0 == NONE
031C 00D3           01196         movwf   ASYNC_CONFIG
031D 2B27           01197         goto    Read_EEPROM_Config_E
                    01198 
031E                01199 Read_EEPROM_Config_B
031E 0855           01200         movfw   ASYNC_TIME_L
031F 3A01           01201         xorlw   0x01                ; See if Low order byte == 1
0320 1D03           01202         btfss   STATUS, Z
0321 2B25           01203         goto    Read_EEPROM_Config_C
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0322 3001           01204         movlw   0x01                ; ASYNC config mode 1 == UPDATE on CHANGE (DELTA)
0323 00D3           01205         movwf   ASYNC_CONFIG
0324 2B27           01206         goto    Read_EEPROM_Config_E
                    01207 
0325                01208 Read_EEPROM_Config_C
0325 3002           01209         movlw   0x02                ; ASYNC config mode 2 == TIMED UPDATE
0326 00D3           01210         movwf   ASYNC_CONFIG
                    01211 
0327                01212 Read_EEPROM_Config_E
0327 3008           01213         movlw   EE_EXPANDER         ; EXPANDER flag
0328 23A0           01214         call    Read_EEPROM
0329 00DE           01215         movwf   EXPANDER
                    01216 
032A 300D           01217         movlw   EE_SLOW_ADC         ; Load the Slow ADC clock setting
032B 23A0           01218         call    Read_EEPROM
032C 39FF           01219         andlw   0xFF                ; Check for non-zero number
032D 1D03           01220         btfss   STATUS, Z
032E 2B31           01221         goto    Read_EEPROM_Config_F
032F 3030           01222         movlw   0x30                    ; SPI Master mode, CKP=1, Fosc/4 = 3,686,400 Hz
0330 2B32           01223         goto    Read_EEPROM_Config_G
0331                01224 Read_EEPROM_Config_F
0331 3032           01225         movlw   0x32                    ; SPI Master mode, CKP=1, Fosc/64 = 230,400 Hz
0332                01226 Read_EEPROM_Config_G
0332 00AB           01227         movwf   ADC_CLOCK
                    01228 
0333 0008           01229         return
                    01230 
                    01231 ;----------------------------------------------------------------------------
                    01232 ; Checks the DIP switch and changes BAUD RATE
                    01233 ;
0334                01234 Check_DIP_Switch
0334 0807           01235         movfw   PORTC           ; Read DIP switch PORT C
0335 3903           01236         andlw   0x03            ; Mask everything but bits 0,1
0336 0629           01237         xorwf   DIP_SWITCH, W
0337 1903           01238         btfsc   STATUS, Z
0338 2B56           01239         goto    Check_DIP_SW_NC
                    01240 
0339 0807           01241         movfw   PORTC           ; Read DIP switch PORT C
033A 3903           01242         andlw   0x03            ; Mask everything but bits 1,2
033B 00A9           01243         movwf   DIP_SWITCH      ; save off for compare operations
                    01244 
033C 3A00           01245         xorlw   0x00            ; Val=0, Pos1=OFF Pos2= OFF, Baud=9600
033D 1D03           01246         btfss   STATUS, Z
033E 2B42           01247         goto    Check_DIP_SW1
033F 3017           01248         movlw   SPBRG_9600      ; 9600 BAUD
0340 00AA           01249         movwf   OUR_SPBRG
0341 2B52           01250         goto    Check_DIP_SW_End
                    01251 
0342                01252 Check_DIP_SW1
0342 0829           01253         movfw   DIP_SWITCH
0343 3A01           01254         xorlw   0x01            ; Val=1, Pos1=ON Pos2=OFF, Baud=19200
0344 1D03           01255         btfss   STATUS, Z
0345 2B49           01256         goto    Check_DIP_SW2
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0346 300B           01257         movlw   SPBRG_19200     ; 19200 BAUD
0347 00AA           01258         movwf   OUR_SPBRG
0348 2B52           01259         goto    Check_DIP_SW_End
                    01260 
0349                01261 Check_DIP_SW2
0349 0829           01262         movfw   DIP_SWITCH
034A 3A02           01263         xorlw   0x02            ; Val=2, Pos1=OFF Pos2=ON, Baud=57600
034B 1D03           01264         btfss   STATUS, Z
034C 2B50           01265         goto    Check_DIP_SW3
034D 3003           01266         movlw   SPBRG_57600     ; 57600 BAUD
034E 00AA           01267         movwf   OUR_SPBRG
034F 2B52           01268         goto    Check_DIP_SW_End
                    01269 
0350                01270 Check_DIP_SW3                   ; Val=3, Pos1=ON Pos2=ON, BAUD=115200
0350 3001           01271         movlw   SPBRG_115200    ; 115200 BAUD
0351 00AA           01272         movwf   OUR_SPBRG
                    01273 
0352                01274 Check_DIP_SW_End
0352 082A           01275         movfw   OUR_SPBRG       ; Load Baud Rate Generator
                    01276 ; ------------- BANK 1 ------------------------------------------------------
0353 1683           01277         bsf     STATUS, RP0     ; select BANK 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0354 0099           01278         movwf   SPBRG           ; Load Baud Rate Generator
                    01279 ; ------------- BANK 0 ------------------------------------------------------
0355 1283           01280         bcf     STATUS, RP0         ; select BANK 0
                    01281 
0356                01282 Check_DIP_SW_NC
0356 0008           01283         return
                    01284 
                    01285 
                    01286 ;----------------------------------------------------------------------------
                    01287 ; Transmits a single character
                    01288 ;
0357                01289 Transmit_Char
0357 0099           01290         movwf   TXREG
0358 1685           01291         bsf     PORTA, LED_BIT  ; LED ON
0359 1683           01292         bsf     STATUS, RP0     ; select BANK 1
035A                01293 Transmit_Pending
035A 0064           01294         clrwdt                  ; Kick the dog
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
035B 1C98           01295         btfss   TXSTA, TRMT
035C 2B5A           01296         goto    Transmit_Pending
035D 1283           01297         bcf     STATUS, RP0     ; select BANK 0
035E 0008           01298         return
                    01299 
                    01300 
                    01301 
                    01302 ;----------------------------------------------------------------------------
                    01303 ; Acquires an ADC sample from the Linear Tech LTC1861
                    01304 ;
                    01305 ; ADC config in CONTROL_ANALOG
                    01306 ;
                    01307 ; Data return in ADC_NIBBLE1/2/3
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01308 ;
035F                01309 Acquire_Sample_1861
035F 082B           01310         movfw   ADC_CLOCK
0360 0094           01311         movwf   SSPCON
0361 1105           01312         bcf     PORTA, ADC_CS           ; Select the ADC
                    01313 
0362 0832           01314         movfw   CONTROL_ANALOG          ; Only bits 0,1 are used to control the LTC1861
0363 00B1           01315         movwf   SCRATCH
0364 0EB1           01316         swapf   SCRATCH, F              ; Move into high order nibble location
0365 1003           01317         bcf     STATUS, C
0366 0DB1           01318         rlf     SCRATCH, F
0367 0D31           01319         rlf     SCRATCH, W
0368 23CB           01320         call    Spi_Send                ; Send out control bits for next conversion - ignore returned data
0369 23CB           01321         call    Spi_Send
036A 23CB           01322         call    Spi_Send
                    01323 
036B 1505           01324         bsf     PORTA, ADC_CS           ; De-select the ADC and start conversion - 3 us typical
036C 0000           01325         nop                             ; 11 NOP's at 14.7456 Mhz
036D 0000           01326         nop
036E 0000           01327         nop
036F 0000           01328         nop
0370 0000           01329         nop
0371 0000           01330         nop
0372 0000           01331         nop
0373 0000           01332         nop
0374 0000           01333         nop
0375 0000           01334         nop
0376 0000           01335         nop
                    01336 
0377 0832           01337         movfw   CONTROL_ANALOG          ; Only bits 0,1 are used to control the LTC1861
0378 00B1           01338         movwf   SCRATCH
0379 0EB1           01339         swapf   SCRATCH, F              ; Move into high order nibble location
037A 1003           01340         bcf     STATUS, C
037B 0DB1           01341         rlf     SCRATCH, F
037C 0D31           01342         rlf     SCRATCH, W
                    01343 
037D 1105           01344         bcf     PORTA, ADC_CS           ; Select the ADC
037E 23CB           01345         call    Spi_Send                ; Send crap - get first 2 nibbles back ftom LTC1861
037F 00B1           01346         movwf   SCRATCH
0380 390F           01347         andlw   0x0F
0381 00BB           01348         movwf   ADC_NIBBLE2
0382 30F0           01349         movlw   0xF0
0383 05B1           01350         andwf   SCRATCH, F
0384 0E31           01351         swapf   SCRATCH, W
0385 00BA           01352         movwf   ADC_NIBBLE1
                    01353 
0386 23CB           01354         call    Spi_Send                ; Send crap = get last nibble back from LTC1861
0387 39F0           01355         andlw   0xF0
0388 00B1           01356         movwf   SCRATCH
0389 0E31           01357         swapf   SCRATCH, W
038A 00BC           01358         movwf   ADC_NIBBLE3
038B 1505           01359         bsf     PORTA, ADC_CS           ; De-select ADC
038C 0008           01360         return
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01361 
                    01362 ;----------------------------------------------------------------------------
                    01363 ; Output and updated DAC value in LTC1448
                    01364 ;
                    01365 ; DAC values in DAC0_MSB, DAC0_LSB, DAC1_MSB and DAC1_LSB
                    01366 ; These need to be put together into 3 bytes (24 bits) for the DAC
                    01367 ;
038D                01368 Update_DAC
038D 3031           01369         movlw   0x31                    ; SPI Master mode, CKP=1, Fosc/16
038E 0094           01370         movwf   SSPCON
038F 1185           01371         bcf     PORTA, DAC_CS           ; Select the DAC
                    01372 
0390 0871           01373         movfw   DAC0_LSB
0391 39F0           01374         andlw   0xF0                    ; mask LSB nibble (2)
0392 0470           01375         iorwf   DAC0_MSB, W             ; OR in the MSB nibble (1)
0393 00B1           01376         movwf   SCRATCH
0394 0E31           01377         swapf   SCRATCH, W
0395 23CB           01378         call    Spi_Send                ; Send byte 1 of 3
                    01379 
0396 0871           01380         movfw   DAC0_LSB
0397 390F           01381         andlw   0x0F                    ; mask LSB nibble (3)
0398 00B1           01382         movwf   SCRATCH
0399 0E31           01383         swapf   SCRATCH, W
039A 0472           01384         iorwf   DAC1_MSB, W
039B 23CB           01385         call    Spi_Send                ; Send byte 2 of 3
                    01386 
039C 0873           01387         movfw   DAC1_LSB
039D 23CB           01388         call    Spi_Send                ; Send byte 3 of 3
                    01389 
039E 1585           01390         bsf     PORTA, DAC_CS           ; De-Select the DAC
039F 0008           01391         return
                    01392 
                    01393 ;----------------------------------------------------------------------------
                    01394 ; Reads the EEPROM
                    01395 ;
                    01396 ; Address to read in W
                    01397 ; Value returned in W
                    01398 ;
03A0                01399 Read_EEPROM
03A0 00B1           01400         movwf   SCRATCH                 ; Save off address
03A1 3031           01401         movlw   0x31                    ; SPI Master mode, CKP=1, Fosc/16
03A2 0094           01402         movwf   SSPCON
03A3 1005           01403         bcf     PORTA, EEPROM_CS        ; Select the EEPROM
03A4 3003           01404         movlw   0x03                    ; READ command, A8=0
03A5 23CB           01405         call    Spi_Send
03A6 0831           01406         movfw   SCRATCH                 ; Send ADDRESS byte
03A7 23CB           01407         call    Spi_Send
03A8 30FF           01408         movlw   0xFF                    ; Send DUMMY just to receive
03A9 23CB           01409         call    Spi_Send
03AA 1405           01410         bsf     PORTA, EEPROM_CS        ; De-Select the EEPROM
03AB 0008           01411         return
                    01412 
                    01413 ;----------------------------------------------------------------------------
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01414 ; Write the EEPROM
                    01415 ;
                    01416 ; Address in EEPROM_ADDRESS
                    01417 ; Value in W
                    01418 ;
                    01419 ;
03AC                01420 Write_EEPROM
03AC 00B1           01421         movwf   SCRATCH                 ; Save off DATA value
03AD 3031           01422         movlw   0x31                    ; SPI Master mode, CKP=1, Fosc/16
03AE 0094           01423         movwf   SSPCON
03AF 1005           01424         bcf     PORTA, EEPROM_CS        ; Select the EEPROM
03B0 3006           01425         movlw   0x06                    ; WRITE ENABLE command
03B1 23CB           01426         call    Spi_Send
03B2 1405           01427         bsf     PORTA, EEPROM_CS        ; De-Select the EEPROM to set WRITE ENABLE
03B3 0000           01428         nop
03B4 0000           01429         nop
03B5 1005           01430         bcf     PORTA, EEPROM_CS        ; Select the EEPROM
03B6 3002           01431         movlw   0x02                    ; WRITE command, A8=0
03B7 23CB           01432         call    Spi_Send
03B8 0828           01433         movfw   EEPROM_ADDRESS          ; ADDRESS byte
03B9 23CB           01434         call    Spi_Send
03BA 0831           01435         movfw   SCRATCH                 ; DATA byte
03BB 23CB           01436         call    Spi_Send
03BC 1405           01437         bsf     PORTA, EEPROM_CS        ; De-Select the EEPROM
03BD 0000           01438         nop
03BE 0000           01439         nop
03BF                01440 Write_EEPROM_Done
03BF 1005           01441         bcf     PORTA, EEPROM_CS        ; Select the EEPROM
03C0 3005           01442         movlw   0x05                    ; READ STATUS REGISTER
03C1 23CB           01443         call    Spi_Send
03C2 30FF           01444         movlw   0xFF                    ; Send DUMMY just to receive
03C3 23CB           01445         call    Spi_Send
03C4 1405           01446         bsf     PORTA, EEPROM_CS        ; De-Select the EEPROM
03C5 0000           01447         nop
03C6 0000           01448         nop
03C7 00B1           01449         movwf   SCRATCH
03C8 1831           01450         btfsc   SCRATCH, 0
03C9 2BBF           01451         goto    Write_EEPROM_Done
03CA 0008           01452         return
                    01453 
                    01454 
                    01455 ;----------------------------------------------------------------------------
                    01456 ; Sends/Receives a byte via the SPI interface
                    01457 ;
                    01458 ; Data to transmit in W
                    01459 ; Received data returned in W
                    01460 ;
03CB                01461 Spi_Send
03CB 0093           01462         movwf   SSPBUF                  ; transmit/receive byte
03CC 1683           01463         bsf     STATUS, RP0             ; select BANK 1
03CD                01464 Spi_Pending
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
03CD 1C14           01465         btfss   SSPSTAT, BF             ; waiting for byte to send
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03CE 2BCD           01466         goto    Spi_Pending
03CF 1283           01467         bcf     STATUS, RP0             ; select BANK 0
03D0 0813           01468         movfw   SSPBUF                  ; read to empty - return in W
03D1 0008           01469         return
                    01470 
                    01471 
                    01472 ;----------------------------------------------------------------------------
                    01473 ; Converts a ASCII Hexadecimal value in W to a binary nibble
                    01474 ; returned in W. Returns 0 if ASCII outside of Hexdecimal range.
                    01475 ;
03D2                01476 Hex_To_Nibble
03D2 00AC           01477         movwf   HEX_TEMP
03D3 3A30           01478         xorlw   '0'
03D4 1903           01479         btfsc   STATUS, Z
03D5 3400           01480         retlw   0x00
03D6 082C           01481         movfw   HEX_TEMP
03D7 3A31           01482         xorlw   '1'
03D8 1903           01483         btfsc   STATUS, Z
03D9 3401           01484         retlw   0x01
03DA 082C           01485         movfw   HEX_TEMP
03DB 3A32           01486         xorlw   '2'
03DC 1903           01487         btfsc   STATUS, Z
03DD 3402           01488         retlw   0x02
03DE 082C           01489         movfw   HEX_TEMP
03DF 3A33           01490         xorlw   '3'
03E0 1903           01491         btfsc   STATUS, Z
03E1 3403           01492         retlw   0x03
03E2 082C           01493         movfw   HEX_TEMP
03E3 3A34           01494         xorlw   '4'
03E4 1903           01495         btfsc   STATUS, Z
03E5 3404           01496         retlw   0x04
03E6 082C           01497         movfw   HEX_TEMP
03E7 3A35           01498         xorlw   '5'
03E8 1903           01499         btfsc   STATUS, Z
03E9 3405           01500         retlw   0x05
03EA 082C           01501         movfw   HEX_TEMP
03EB 3A36           01502         xorlw   '6'
03EC 1903           01503         btfsc   STATUS, Z
03ED 3406           01504         retlw   0x06
03EE 082C           01505         movfw   HEX_TEMP
03EF 3A36           01506         xorlw   '6'
03F0 1903           01507         btfsc   STATUS, Z
03F1 3406           01508         retlw   0x06
03F2 082C           01509         movfw   HEX_TEMP
03F3 3A37           01510         xorlw   '7'
03F4 1903           01511         btfsc   STATUS, Z
03F5 3407           01512         retlw   0x07
03F6 082C           01513         movfw   HEX_TEMP
03F7 3A38           01514         xorlw   '8'
03F8 1903           01515         btfsc   STATUS, Z
03F9 3408           01516         retlw   0x08
03FA 082C           01517         movfw   HEX_TEMP
03FB 3A39           01518         xorlw   '9'
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FC 1903           01519         btfsc   STATUS, Z
03FD 3409           01520         retlw   0x09
03FE 082C           01521         movfw   HEX_TEMP
03FF 3A41           01522         xorlw   'A'
0400 1903           01523         btfsc   STATUS, Z
0401 340A           01524         retlw   0x0A
0402 082C           01525         movfw   HEX_TEMP
0403 3A61           01526         xorlw   'a'
0404 1903           01527         btfsc   STATUS, Z
0405 340A           01528         retlw   0x0A
0406 082C           01529         movfw   HEX_TEMP
0407 3A42           01530         xorlw   'B'
0408 1903           01531         btfsc   STATUS, Z
0409 340B           01532         retlw   0x0B
040A 082C           01533         movfw   HEX_TEMP
040B 3A62           01534         xorlw   'b'
040C 1903           01535         btfsc   STATUS, Z
040D 340B           01536         retlw   0x0B
040E 082C           01537         movfw   HEX_TEMP
040F 3A43           01538         xorlw   'C'
0410 1903           01539         btfsc   STATUS, Z
0411 340C           01540         retlw   0x0C
0412 082C           01541         movfw   HEX_TEMP
0413 3A63           01542         xorlw   'c'
0414 1903           01543         btfsc   STATUS, Z
0415 340C           01544         retlw   0x0C
0416 082C           01545         movfw   HEX_TEMP
0417 3A44           01546         xorlw   'D'
0418 1903           01547         btfsc   STATUS, Z
0419 340D           01548         retlw   0x0D
041A 082C           01549         movfw   HEX_TEMP
041B 3A64           01550         xorlw   'd'
041C 1903           01551         btfsc   STATUS, Z
041D 340D           01552         retlw   0x0D
041E 082C           01553         movfw   HEX_TEMP
041F 3A45           01554         xorlw   'E'
0420 1903           01555         btfsc   STATUS, Z
0421 340E           01556         retlw   0x0E
0422 082C           01557         movfw   HEX_TEMP
0423 3A65           01558         xorlw   'e'
0424 1903           01559         btfsc   STATUS, Z
0425 340E           01560         retlw   0x0E
0426 082C           01561         movfw   HEX_TEMP
0427 3A46           01562         xorlw   'F'
0428 1903           01563         btfsc   STATUS, Z
0429 340F           01564         retlw   0x0F
042A 082C           01565         movfw   HEX_TEMP
042B 3A66           01566         xorlw   'f'
042C 1903           01567         btfsc   STATUS, Z
042D 340F           01568         retlw   0x0F
042E 3400           01569         retlw   0
                    01570 
                    01571 
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01572 ;----------------------------------------------------------------------------
                    01573 ;----------------------------------------------------------------------------
                    01574 
                    01575 
                    01576 ;----------------------------------------------------------------------------
                    01577 ;
                    01578 ; Interrupt Service Routines Follow.
                    01579 ;
                    01580 ;
                    01581 ;----------------------------------------------------------------------------
                    01582 ; Timer1_Isr
                    01583 ;                   1 millisecond timer ISR
                    01584 ;                   Bump the running time variables
                    01585 ;----------------------------------------------------------------------------
                    01586 ;
042F                01587 Timer1_Isr
042F 30F1           01588         movlw   TMR1_RELOAD_H       ; Re-Load Timer1 counters
0430 008F           01589         movwf   TMR1H
0431 3089           01590         movlw   TMR1_RELOAD_L
0432 008E           01591         movwf   TMR1L
0433 100C           01592         bcf     PIR1, TMR1IF        ; clear the Timer 1 Irq
                    01593 
0434                01594 Timer1_Isr_Cnt
0434 0FA4           01595         incfsz  RUNNING_CNT_L, F        ; Bump the LSB counter
0435 2C4B           01596         goto    Timer1_Isr_End
0436 0AA3           01597         incf    RUNNING_CNT_H, F        ; Every 255 milliseconds gets here
                    01598 
0437                01599 Timer1_Isr_LED
0437 08A7           01600         movf    LED_ON_FLAG, F          ; Handle the LED blink
0438 1903           01601         btfsc   STATUS, Z
0439 2C42           01602         goto    Timer1_Led_Off
043A 0AA5           01603         incf    LED_CNT_L, F
043B 0825           01604         movfw   LED_CNT_L
043C 3A02           01605         xorlw   0x02
043D 1D03           01606         btfss   STATUS,Z
043E 2C4B           01607         goto    Timer1_Isr_End
043F 1285           01608         bcf     PORTA, LED_BIT          ; Turn LED OFF
0440 01A7           01609         clrf    LED_ON_FLAG             ; clear the ON flag
0441 2C4B           01610         goto    Timer1_Isr_End
                    01611 
0442                01612 Timer1_Led_Off
0442 0AA5           01613         incf    LED_CNT_L, F
0443 0825           01614         movfw   LED_CNT_L
0444 3A07           01615         xorlw   0x07
0445 1D03           01616         btfss   STATUS,Z
0446 2C4B           01617         goto    Timer1_Isr_End
0447 1685           01618         bsf     PORTA, LED_BIT          ; Turn LED ON
0448 3001           01619         movlw   TRUE                    ; set the ON flag
0449 00A7           01620         movwf   LED_ON_FLAG
044A 01A5           01621         clrf    LED_CNT_L
                    01622 
044B                01623 Timer1_Isr_End
044B 0008           01624         return
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01625 
                    01626 ;
                    01627 ;----------------------------------------------------------------------------
                    01628 ; Rcv_Isr
                    01629 ;
                    01630 ; Asynchronous data reception ISR
                    01631 ;----------------------------------------------------------------------------
                    01632 ;
044C                01633 Rcv_Isr
044C 1918           01634         btfsc   RCSTA, FERR
044D 2C54           01635         goto    Rcv_Isr_Frame_Error
044E 1898           01636         btfsc   RCSTA, OERR
044F 2C51           01637         goto    Rcv_Isr_Over_Error
0450 2C58           01638         goto    Rcv_Isr_Read
                    01639 
0451                01640 Rcv_Isr_Over_Error
0451 1218           01641         bcf     RCSTA, CREN         ; Clear CREN to reset receive logic
0452 0000           01642         nop
0453 1618           01643         bsf     RCSTA, CREN
0454                01644 Rcv_Isr_Frame_Error
0454 0AB3           01645         incf    RCV_ERROR_CNT, F
0455 081A           01646         movfw   RCREG               ; read data byte into W and DUMP
0456 01D1           01647         clrf    RCV_LAST_CHAR
0457 0008           01648         return
                    01649 
0458                01650 Rcv_Isr_Read
0458 081A           01651         movfw   RCREG               ; read data byte into W
0459 00D1           01652         movwf   RCV_LAST_CHAR
045A 300A           01653         movlw   0x0A                ; Ignore line feeds
045B 0651           01654         xorwf   RCV_LAST_CHAR, W
045C 1903           01655         btfsc   STATUS, Z
045D 0008           01656         return                      ; return without processing
                    01657 
045E 083F           01658         movfw   RCV_BUFFER_PTR      ; Get RCV buffer pointer
045F 0084           01659         movwf   FSR
0460 0851           01660         movfw   RCV_LAST_CHAR
0461 0080           01661         movwf   INDF                ; Save off in RCV buffer
                    01662 
0462 1685           01663         bsf     PORTA, LED_BIT      ; LED ON
0463 01A5           01664         clrf    LED_CNT_L
0464 3001           01665         movlw   TRUE                ; Set LED on flag
0465 00A7           01666         movwf   LED_ON_FLAG
                    01667 
0466 083F           01668         movfw   RCV_BUFFER_PTR      ; Get RCV buffer pointer
0467 0A3F           01669         incf    RCV_BUFFER_PTR, W   ; Bump RCV buffer pointer for next read
0468 394F           01670         andlw   0x4F                ; Prevent Buffer overrun
0469 00BF           01671         movwf   RCV_BUFFER_PTR
046A 0008           01672         return
                    01673 
                    01674 ;
                    01675 ;----------------------------------------------------------------------------
                    01676 ; Tmr0_Isr
                    01677 ;
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01678 ; Timer 0 ISR - Counter Input is directed to Timer 0
                    01679 ;               ISR fires on roll-over (Capture Port)
                    01680 ;----------------------------------------------------------------------------
                    01681 ;
046B                01682 Tmr0_Isr
046B 110B           01683         bcf     INTCON, T0IF        ; Clear the interrupt source
046C 0FFA           01684         incfsz  TMR0H, F            ; Bump the High order byte count (LSB)
046D 2C71           01685         goto    Tmr0_Isr_End
046E 0FF9           01686         incfsz  TMR0L_MSB, F        ; Bump the Low order byte count (MSB)
046F 2C71           01687         goto    Tmr0_Isr_End
0470 0FF8           01688         incfsz  TMR0H_MSB, F        ; Bump the High order byte count (MSB)
                    01689 
0471                01690 Tmr0_Isr_End
0471 0008           01691         return
                    01692 ;
                    01693 ;----------------------------------------------------------------------------
                    01694 ; Main_Isr
                    01695 ;
                    01696 ; Main Interrupt Service routine. Interrupt sources are checked and routed
                    01697 ; to the proper specific ISR. W and STATUS are saved and restored.
                    01698 ;----------------------------------------------------------------------------
                    01699 ;
0472                01700 Main_Isr
0472 00A0           01701         movwf   W_TEMP          ; save W in either BANK 0 or BANK 1
0473 0803           01702         movfw   STATUS          ; save STATUS into W
0474 1283           01703         bcf     STATUS, RP0     ; select BANK 0
0475 00A1           01704         movwf   STATUS_TEMP     ; save STATUS in temp
                    01705 
0476 180C           01706         btfsc   PIR1, TMR1IF    ; Is TMR1IF Set?
0477 242F           01707         call    Timer1_Isr
                    01708 
0478 1A8C           01709         btfsc   PIR1, RCIF      ; is bit 5 (RCIF) Set?
0479 244C           01710         call    Rcv_Isr
                    01711 
047A 190B           01712         btfsc   INTCON, T0IF    ; Is Timer0 Set?
047B 246B           01713         call    Tmr0_Isr
                    01714 
047C 0821           01715         movfw   STATUS_TEMP     ; move old STATUS into W
047D 0083           01716         movwf   STATUS          ; restore status
047E 0EA0           01717         swapf   W_TEMP, F       ; swap it so it will be right in the next instruction.
047F 0E20           01718         swapf   W_TEMP, W       ; move old W into W
0480 0009           01719         retfie
                    01720 ;
                    01721 ;----------------------------------------------------------------------------
                    01722 ;
                    01723 
                    01724 ;----------------------------------------------------------------------------
                    01725 ;----------------------------------------------------------------------------
                    01726 ;
                    01727 ; Strings to print follow
                    01728 ; NOTE!!!!!
                    01729 ; The PCLATH bits must be set for the correct page location of the code.
                    01730 ;
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0500                01731         org     0x500
                    01732 ; Index is assumed to be in W
0500                01733 Startup_String
0500 140A           01734         bsf     PCLATH, 0   ; Adjust PCLATH so we're in the same page when
0501 108A           01735         bcf     PCLATH, 1   ; the add to PCL is done
0502 150A           01736         bsf     PCLATH, 2
0503 0782           01737         addwf   PCL, F
0504 340D           01738         RETLW   0D
0505 3449           01739         RETLW   'I'
0506 346E           01740         RETLW   'n'
0507 3474           01741         RETLW   't'
0508 3465           01742         RETLW   'e'
0509 3467           01743         RETLW   'g'
050A 3472           01744         RETLW   'r'
050B 3469           01745         RETLW   'i'
050C 3474           01746         RETLW   't'
050D 3479           01747         RETLW   'y'
050E 3420           01748         RETLW   ' '
050F 3449           01749         RETLW   'I'
0510 346E           01750         RETLW   'n'
0511 3473           01751         RETLW   's'
0512 3474           01752         RETLW   't'
0513 3472           01753         RETLW   'r'
0514 3475           01754         RETLW   'u'
0515 346D           01755         RETLW   'm'
0516 3465           01756         RETLW   'e'
0517 346E           01757         RETLW   'n'
0518 3474           01758         RETLW   't'
0519 3473           01759         RETLW   's'
051A 3420           01760         RETLW   ' '
051B 3432           01761         RETLW   '2'
051C 3433           01762         RETLW   '3'
051D 3432           01763         RETLW   '2'
051E 344D           01764         RETLW   'M'
051F 3432           01765         RETLW   '2'
0520 3430           01766         RETLW   '0'
0521 3430           01767         RETLW   '0'
0522 3420           01768         RETLW   ' '
0523 344D           01769         RETLW   'M'
0524 346F           01770         RETLW   'o'
0525 3464           01771         RETLW   'd'
0526 3475           01772         RETLW   'u'
0527 346C           01773         RETLW   'l'
0528 3465           01774         RETLW   'e'
0529 3420           01775         RETLW   ' '
052A 3476           01776         RETLW   'v'
052B 3433           01777         RETLW   VERSION_MAJOR
052C 342E           01778         RETLW   '.'
052D 3432           01779         RETLW   VERSION_MINOR
052E 340D           01780         RETLW   0D
052F 3400           01781         RETLW   00
                    01782 
                    01783 ;----------------------------------------------------------------------------
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01784 ; Converts a binary nibble in W to an ASCII Hexadecimal value
                    01785 ; returned in W
                    01786 ;
0530                01787 Nibble_To_Hex
0530 140A           01788         bsf     PCLATH, 0   ; Adjust PCLATH so we're in the same page when
0531 108A           01789         bcf     PCLATH, 1   ; the add to PCL is done
0532 150A           01790         bsf     PCLATH, 2
0533 390F           01791         andlw   0x0F
0534 0782           01792         addwf   PCL, F
0535 3430           01793         retlw   '0'
0536 3431           01794         retlw   '1'
0537 3432           01795         retlw   '2'
0538 3433           01796         retlw   '3'
0539 3434           01797         retlw   '4'
053A 3435           01798         retlw   '5'
053B 3436           01799         retlw   '6'
053C 3437           01800         retlw   '7'
053D 3438           01801         retlw   '8'
053E 3439           01802         retlw   '9'
053F 3441           01803         retlw   'A'
0540 3442           01804         retlw   'B'
0541 3443           01805         retlw   'C'
0542 3444           01806         retlw   'D'
0543 3445           01807         retlw   'E'
0544 3446           01808         retlw   'F'
                    01809 
                    01810 ;
                    01811 ; End of Code
                    01812 ;
                    01813         end
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

ADC_CLOCK                         0000002B
ADC_CS                            00000002
ADC_NIBBLE1                       0000003A
ADC_NIBBLE2                       0000003B
ADC_NIBBLE3                       0000003C
ASYNC_CONFIG                      00000053
ASYNC_TIME_H                      00000054
ASYNC_TIME_L                      00000055
Acquire_Sample_1861               0000035F
BF                                00000000
BI_UNI_POLAR                      00000026
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CKE                               00000006
CKP                               00000004
CONTROL_ANALOG                    00000032
CREN                              00000004
CSRC                              00000007
CURRENT_PTR                       00000064
Check_DIP_SW1                     00000342
Check_DIP_SW2                     00000349
Check_DIP_SW3                     00000350
Check_DIP_SW_End                  00000352
Check_DIP_SW_NC                   00000356
Check_DIP_Switch                  00000334
D                                 00000005
DAC0_LSB                          00000071
DAC0_MSB                          00000070
DAC1_LSB                          00000073
DAC1_MSB                          00000072
DAC_CS                            00000003
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
DIP_SWITCH                        00000029
D_A                               00000005
EEPROM_ADDRESS                    00000028
EEPROM_CS                         00000000
EE_ANALOG_CFG_BASE                00000011
EE_ASYNC_CONFIG_LSB               00000005
EE_ASYNC_CONFIG_MSB               00000004
EE_DAC0_LSB                       0000000A
EE_DAC0_MSB                       00000009
EE_DAC1_LSB                       0000000C
EE_DAC1_MSB                       0000000B
EE_DEST_ADDR                      00000001
EE_EXPANDER                       00000008
EE_MOD_ADDR                       00000000
EE_OFFSET_CALIB                   0000000F
EE_PORT1_DEF                      00000006
EE_PORT1_DIR                      00000002
EE_PORT2_DEF                      00000007
EE_PORT2_DIR                      00000003
EE_SLOW_ADC                       0000000D
EE_STREAM_ANALOG                  00000010
EE_STREAM_COUNT                   0000001A
EE_STREAM_DIG                     00000019
EXPANDER                          0000005E
F                                 00000001
FALSE                             00000000
FERR                              00000002
FSR                               00000004
GIE                               00000007
HEX_TEMP                          0000002C
Hex_To_Nibble                     000003D2
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INPUT_REGISTER                    00000030
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
LED_BIT                           00000005
LED_CNT_L                         00000025
LED_ON_FLAG                       00000027
Main_Check_Cont1                  000000E6
Main_Check_Cont2                  000000EA
Main_Check_Cont3                  000000F2
Main_Isr                          00000472
Main_Loop                         000000AE
Main_Loop_Async_Delta             000000BB
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

Main_Loop_Async_I                 000000C8
Main_Loop_Async_N                 000000CC
Main_Loop_Async_Timed             000000D2
Main_Loop_Check_Async             000000B4
Main_Loop_Check_G                 00000205
Main_Loop_Check_H                 000002BA
Main_Loop_Check_I                 00000113
Main_Loop_Check_J                 00000294
Main_Loop_Check_K                 000002ED
Main_Loop_Check_L                 00000167
Main_Loop_Check_L1                0000017F
Main_Loop_Check_Lx                0000018E
Main_Loop_Check_M                 000001D5
Main_Loop_Check_N                 00000194
Main_Loop_Check_O                 00000132
Main_Loop_Check_P                 00000220
Main_Loop_Check_Question          000002DB
Main_Loop_Check_R                 00000273
Main_Loop_Check_S                 000002A2
Main_Loop_Check_Stream            000000DF
Main_Loop_Check_T                 000001E9
Main_Loop_Check_U                 00000148
Main_Loop_Check_V                 00000100
Main_Loop_Check_W                 00000256
Main_Loop_Check_Y                 000002C8
Main_Loop_Check_Z                 000002CE
Main_Loop_Error_Response          00000304
Main_Loop_Parse                   000000FF
Main_Loop_Rcv_End                 00000308
Main_Loop_Reset_Cpu               000002DA
Main_Loop_Stream                  000000E2
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
Nibble_To_Hex                     00000530
OERR                              00000001
OPTION_REG                        00000081
OUR_PORTB                         00000038
OUR_PORTD                         00000039
OUR_SPBRG                         0000002A
OUR_TMR0H                         00000076
OUR_TMR0H_MSB                     00000074
OUR_TMR0L                         00000077
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

OUR_TMR0L_MSB                     00000075
OUR_TRISB                         00000036
OUR_TRISD                         00000037
P                                 00000004
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PREV_PORTB                        00000060
PREV_PORTD                        00000061
PREV_TMR0                         00000062
PREV_TMR0H                        00000063
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PWM_DIVISOR                       00000067
PWM_LSB                           00000065
PWM_MSB                           00000066
Printf_Startup                    000000A6
Printf_Startup_Q                  000002E4
Printf_Startup_end                000000AE
Printf_Startup_end_Q              000002EC
Process_Analog                    00000155
Process_I                         0000011D
Process_N                         0000019E
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RCV_BUFFER                        00000040
RCV_BUFFER_PTR                    0000003F
RCV_BUFFER_ST                     00000050
RCV_ERROR_CNT                     00000033
RCV_LAST_CHAR                     00000051
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RTC_CS                            00000001
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

RUNNING_CNT_H                     00000023
RUNNING_CNT_L                     00000024
RX9                               00000006
RX9D                              00000000
R_W                               00000002
RamBank0                          00000020
Rcv_Isr                           0000044C
Rcv_Isr_Frame_Error               00000454
Rcv_Isr_Over_Error                00000451
Rcv_Isr_Read                      00000458
Read_EEPROM                       000003A0
Read_EEPROM_Config                0000030B
Read_EEPROM_Config_A              00000317
Read_EEPROM_Config_B              0000031E
Read_EEPROM_Config_C              00000325
Read_EEPROM_Config_E              00000327
Read_EEPROM_Config_F              00000331
Read_EEPROM_Config_G              00000332
S                                 00000003
SCRATCH                           00000031
SMP                               00000007
SPBRG                             00000099
SPBRG_115200                      00000001
SPBRG_1200                        000000BF
SPBRG_19200                       0000000B
SPBRG_230400                      00000000
SPBRG_2400                        0000005F
SPBRG_38400                       00000005
SPBRG_4800                        0000002F
SPBRG_57600                       00000003
SPBRG_9600                        00000017
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STATUS_TEMP                       00000021
STREAM                            00000052
STREAM_ANALOG                     0000005B
STREAM_ANALOG_CNT                 00000059
STREAM_CH                         0000005A
STREAM_COUNT                      0000005D
STREAM_DIG                        0000005C
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

STRING_INDEX                      00000022
SYNC                              00000004
Spi_Pending                       000003CD
Spi_Send                          000003CB
Start                             00000020
Start4                            00000053
Start_LED_On                      00000071
Start_RS232                       00000075
Start_Read_Eeprom                 00000078
Startup_String                    00000500
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0H                             0000007A
TMR0H_MSB                         00000078
TMR0L_MSB                         00000079
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR1_RELOAD_H                     000000F1
TMR1_RELOAD_L                     00000089
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRMT                              00000001
TRUE                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Timer1_Isr                        0000042F
Timer1_Isr_Cnt                    00000434
Timer1_Isr_End                    0000044B
Timer1_Isr_LED                    00000437
Timer1_Led_Off                    00000442
Tmr0_Isr                          0000046B
Tmr0_Isr_End                      00000471
Transmit_Char                     00000357
Transmit_Pending                  0000035A
UA                                00000001
Update_DAC                        0000038D
VERSION_MAJOR                     00000033
VERSION_MINOR                     00000032
W                                 00000000
WCOL                              00000007
W_TEMP                            00000020
Write_EEPROM                      000003AC
Write_EEPROM_Done                 000003BF
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CP_50                            00002AEF
_CP_75                            000015DF
_CP_ALL                           000000CF
_CP_OFF                           00003FFF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16C63A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XX--X----------- ---------------- XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 02.01.08 Intermediate   232M200.ASM   3-23-2003  10:18:41         PAGE 43


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : X--------------- ---------------- ---------------- ----------------
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXX----------- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1193
Program Memory Words Free:  2903


Errors   :     0
Warnings :     1 reported,     0 suppressed
Messages :    15 reported,     0 suppressed

