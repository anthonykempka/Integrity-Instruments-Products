#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CIntegrityioctrl1 wrapper class

class CIntegrityioctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CIntegrityioctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xB9B93B71, 0x3EA9, 0x4BDD, { 0x97, 0x34, 0xCD, 0x28, 0xDF, 0x66, 0xEB, 0x75 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DIntegrityIO

// Functions
//

	void SetDIOBit(long bitValue, long bitPosition)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bitValue, bitPosition);
	}
	long GetDIOBit(long bitPosition)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bitPosition);
		return result;
	}
	void SetDIOBitDDR(long bitValue, long bitPosition)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bitValue, bitPosition);
	}
	long GetDIOBitDDR(short bitPosition)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bitPosition);
		return result;
	}
	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetUSBModuleAddress(long moduleIndex)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms, moduleIndex);
		return result;
	}
	long GetUSBDataBlock(double * adcData, long startIndex, long count)
	{
		long result;
		static BYTE parms[] = VTS_PR8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_I4, (void*)&result, parms, adcData, startIndex, count);
		return result;
	}

// Properties
//

long GetlnComPort()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}
void SetlnComPort(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}
long GetlnBaudRate()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}
void SetlnBaudRate(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}
long GetlnProtocol()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}
void SetlnProtocol(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}
long GetlnModuleAddress()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}
void SetlnModuleAddress(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}
BOOL GetbPortOpen()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}
void SetbPortOpen(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}
long GetlnCommTimeout()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}
void SetlnCommTimeout(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}
double GetdReferenceVoltage()
{
	double result;
	GetProperty(0x7, VT_R8, (void*)&result);
	return result;
}
void SetdReferenceVoltage(double propVal)
{
	SetProperty(0x7, VT_R8, propVal);
}
long GetlnAbout()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}
void SetlnAbout(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}
long GetlnLastError()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}
void SetlnLastError(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}
BOOL GetbDialogDisable()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}
void SetbDialogDisable(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}
long GetlnSoftwareVersion()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}
void SetlnSoftwareVersion(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}
long GetlnFirmwareVersion()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}
void SetlnFirmwareVersion(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}
long GetlnDigitalPort()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}
void SetlnDigitalPort(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}
long GetlnDigitalDirection()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}
void SetlnDigitalDirection(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}
long GetlnPulseCount()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}
void SetlnPulseCount(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}
long GetlnADCControl()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}
void SetlnADCControl(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}
double GetdADCBipolar()
{
	double result;
	GetProperty(0x11, VT_R8, (void*)&result);
	return result;
}
void SetdADCBipolar(double propVal)
{
	SetProperty(0x11, VT_R8, propVal);
}
long GetlnDACControl()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}
void SetlnDACControl(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}
double GetdDACOutput()
{
	double result;
	GetProperty(0x13, VT_R8, (void*)&result);
	return result;
}
void SetdDACOutput(double propVal)
{
	SetProperty(0x13, VT_R8, propVal);
}
long GetlnRcvErrCount()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}
void SetlnRcvErrCount(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}
BOOL GetbPWMUpdate()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}
void SetbPWMUpdate(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}
long GetlnEEPROMAddress()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}
void SetlnEEPROMAddress(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}
long GetlnEEPROMData()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}
void SetlnEEPROMData(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}
BOOL GetbResetModule()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}
void SetbResetModule(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}
long GetlnPWMFreq()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}
void SetlnPWMFreq(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}
long GetlnPWMDuty()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}
void SetlnPWMDuty(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}
double GetdADCUnipolar()
{
	double result;
	GetProperty(0x1b, VT_R8, (void*)&result);
	return result;
}
void SetdADCUnipolar(double propVal)
{
	SetProperty(0x1b, VT_R8, propVal);
}
BOOL GetbInvalidate()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}
void SetbInvalidate(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}
long GetlnAnalogGain()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}
void SetlnAnalogGain(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}
BOOL GetbModeStream()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}
void SetbModeStream(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}
double GetdDACReferenceVoltage()
{
	double result;
	GetProperty(0x23, VT_R8, (void*)&result);
	return result;
}
void SetdDACReferenceVoltage(double propVal)
{
	SetProperty(0x23, VT_R8, propVal);
}
long GetlnUSBStreamBlockCount()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}
void SetlnUSBStreamBlockCount(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}
short GetnADCBits()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}
void SetnADCBits(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}
double GetdADCScale()
{
	double result;
	GetProperty(0x28, VT_R8, (void*)&result);
	return result;
}
void SetdADCScale(double propVal)
{
	SetProperty(0x28, VT_R8, propVal);
}


};
